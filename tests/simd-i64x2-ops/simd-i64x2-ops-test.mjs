// filepath: /Users/martinericsson/dev/fes-compiler/tests/simd-i64x2-ops/simd-i64x2-ops-test.mjs
import { readTestData, logger } from '../test-utils.mjs';

// Test for i64x2 operations
async function testSIMDI64x2Ops(debug = false) {
    const log = logger(debug);
    try {
        const { wasmBuffer } = await readTestData('simd-i64x2-ops/simd-i64x2-ops.wat', debug);
        log('SIMD i64x2 operations test WAT file loaded successfully');
        
        const { instance } = await WebAssembly.instantiate(wasmBuffer);
        log('SIMD i64x2 operations test WASM module instantiated successfully');
        
        // Test i64x2.abs
        const absResult = instance.exports.test_i64x2_abs();
        log(`i64x2.abs test: got ${absResult}, expected 1`);
        if (absResult !== 1) {
            throw new Error(`i64x2.abs test failed: expected 1, got ${absResult}`);
        } // Generated by ðŸ¤–
        
        // Test i64x2.neg
        const negResult = instance.exports.test_i64x2_neg();
        log(`i64x2.neg test: got ${negResult}, expected -1`);
        if (negResult !== -1n) {
            throw new Error(`i64x2.neg test failed: expected -1n, got ${negResult}`);
        }
        
        // Test i64x2.all_true
        const allTrueTrueResult = instance.exports.test_i64x2_all_true_true();
        log(`i64x2.all_true true test: got ${allTrueTrueResult}, expected 1`);
        if (allTrueTrueResult !== 1) {
            throw new Error(`i64x2.all_true true test failed: expected 1, got ${allTrueTrueResult}`);
        }
        
        const allTrueFalseResult = instance.exports.test_i64x2_all_true_false();
        log(`i64x2.all_true false test: got ${allTrueFalseResult}, expected 0`);
        if (allTrueFalseResult !== 0) {
            throw new Error(`i64x2.all_true false test failed: expected 0, got ${allTrueFalseResult}`);
        }
        
        // Test i64x2.bitmask
        const bitmaskResult = instance.exports.test_i64x2_bitmask();
        log(`i64x2.bitmask test: got ${bitmaskResult}, expected 1`);
        if (bitmaskResult !== 1) {
            throw new Error(`i64x2.bitmask test failed: expected 1, got ${bitmaskResult}`);
        }
        
        // Test i64x2.extend_low_i32x4_s
        const extendLowSResult = instance.exports.test_i64x2_extend_low_i32x4_s();
        log(`i64x2.extend_low_i32x4_s test: got ${extendLowSResult}, expected -1`);
        if (extendLowSResult !== -1n) {
            throw new Error(`i64x2.extend_low_i32x4_s test failed: expected -1n, got ${extendLowSResult}`);
        }
        
        // Test i64x2.extend_high_i32x4_s
        const extendHighSResult = instance.exports.test_i64x2_extend_high_i32x4_s();
        log(`i64x2.extend_high_i32x4_s test: got ${extendHighSResult}, expected -3`);
        if (extendHighSResult !== -3n) {
            throw new Error(`i64x2.extend_high_i32x4_s test failed: expected -3n, got ${extendHighSResult}`);
        }
        
        // Test i64x2.extend_low_i32x4_u
        const extendLowUResult = instance.exports.test_i64x2_extend_low_i32x4_u();
        log(`i64x2.extend_low_i32x4_u test: got ${extendLowUResult}, expected 4294967295`);
        if (extendLowUResult !== 4294967295n) {
            throw new Error(`i64x2.extend_low_i32x4_u test failed: expected 4294967295n, got ${extendLowUResult}`);
        }
        
        // Test i64x2.extend_high_i32x4_u
        const extendHighUResult = instance.exports.test_i64x2_extend_high_i32x4_u();
        log(`i64x2.extend_high_i32x4_u test: got ${extendHighUResult}, expected 4294967293`);
        if (extendHighUResult !== 4294967293n) {
            throw new Error(`i64x2.extend_high_i32x4_u test failed: expected 4294967293n, got ${extendHighUResult}`);
        }
        
        // Test i64x2.shl
        const shlResult = instance.exports.test_i64x2_shl();
        log(`i64x2.shl test: got ${shlResult}, expected 2`);
        if (shlResult !== 2n) {
            throw new Error(`i64x2.shl test failed: expected 2n, got ${shlResult}`);
        }
        
        // Test i64x2.shr_s
        const shrSResult = instance.exports.test_i64x2_shr_s();
        log(`i64x2.shr_s test: got ${shrSResult}, expected -2`);
        if (shrSResult !== -2n) {
            throw new Error(`i64x2.shr_s test failed: expected -2n, got ${shrSResult}`);
        }
        
        // Test i64x2.shr_u
        const shrUResult = instance.exports.test_i64x2_shr_u();
        log(`i64x2.shr_u test: got ${shrUResult}`);
        // The expected value is the result of unsigned right shift of -4 by 1 bit
        // For 64-bit values, this is a very large positive number: 2^63 - 2
        const expectedShrU = 9223372036854775806n;
        if (shrUResult !== expectedShrU) {
            throw new Error(`i64x2.shr_u test failed: expected ${expectedShrU}, got ${shrUResult}`);
        }
        
        // Test i64x2.add
        const addResult = instance.exports.test_i64x2_add();
        log(`i64x2.add test: got ${addResult}, expected 4`);
        if (addResult !== 4n) {
            throw new Error(`i64x2.add test failed: expected 4n, got ${addResult}`);
        }
        
        // Test i64x2.sub
        const subResult = instance.exports.test_i64x2_sub();
        log(`i64x2.sub test: got ${subResult}, expected 2`);
        if (subResult !== 2n) {
            throw new Error(`i64x2.sub test failed: expected 2n, got ${subResult}`);
        }
        
        // Test i64x2.mul
        const mulResult = instance.exports.test_i64x2_mul();
        log(`i64x2.mul test: got ${mulResult}, expected 8`);
        if (mulResult !== 8n) {
            throw new Error(`i64x2.mul test failed: expected 8n, got ${mulResult}`);
        }
        
        // Test i64x2.extmul_low_i32x4_s
        const extmulLowSResult = instance.exports.test_i64x2_extmul_low_i32x4_s();
        log(`i64x2.extmul_low_i32x4_s test: got ${extmulLowSResult}, expected 8`);
        if (extmulLowSResult !== 8n) {
            throw new Error(`i64x2.extmul_low_i32x4_s test failed: expected 8n, got ${extmulLowSResult}`);
        }
        
        // Test i64x2.extmul_high_i32x4_s
        const extmulHighSResult = instance.exports.test_i64x2_extmul_high_i32x4_s();
        log(`i64x2.extmul_high_i32x4_s test: got ${extmulHighSResult}, expected 24`);
        if (extmulHighSResult !== 24n) {
            throw new Error(`i64x2.extmul_high_i32x4_s test failed: expected 24n, got ${extmulHighSResult}`);
        }
        
        // Test i64x2.extmul_low_i32x4_u
        const extmulLowUResult = instance.exports.test_i64x2_extmul_low_i32x4_u();
        log(`i64x2.extmul_low_i32x4_u test: got ${extmulLowUResult}, expected 8`);
        if (extmulLowUResult !== 8n) {
            throw new Error(`i64x2.extmul_low_i32x4_u test failed: expected 8n, got ${extmulLowUResult}`);
        }
        
        // Test i64x2.extmul_high_i32x4_u
        const extmulHighUResult = instance.exports.test_i64x2_extmul_high_i32x4_u();
        log(`i64x2.extmul_high_i32x4_u test: got ${extmulHighUResult}, expected 24`);
        if (extmulHighUResult !== 24n) {
            throw new Error(`i64x2.extmul_high_i32x4_u test failed: expected 24n, got ${extmulHighUResult}`);
        }
        
        log('All i64x2 operations tests passed!');
        return true;
    } catch (error) {
        console.error(`SIMD i64x2 operations test failed: ${error.message}`);
        return false;
    }
}

export default testSIMDI64x2Ops
