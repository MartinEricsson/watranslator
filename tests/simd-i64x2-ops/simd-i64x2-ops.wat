(module
  ;; Import memory
  (memory (export "memory") 1)

  ;; Test i64x2.abs
  (func (export "test_i64x2_abs") (result i32)
    ;; Create a vector with a simple negative value
    v128.const i64x2 -10 20
    i64x2.abs
    ;; Check if first lane equals 10 (return 1 if true, 0 if false)
    v128.const i64x2 10 0
    i64x2.eq
    ;; Extract result from comparison (0 or -1)
    i32x4.extract_lane 0
    ;; Convert -1 to 1 for consistency with other tests
    i32.const -1
    i32.eq
    i32.const 1
    i32.and
  ) ;; Generated by ðŸ¤–

  ;; Test i64x2.neg
  (func (export "test_i64x2_neg") (result i64)
    ;; Create a vector [1, 2]
    v128.const i64x2 1 2
    i64x2.neg
    ;; Extract the first lane (should be -1)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.all_true
  (func (export "test_i64x2_all_true_true") (result i32)
    ;; Create a vector with all non-zero values
    v128.const i64x2 1 2
    i64x2.all_true
  )

  (func (export "test_i64x2_all_true_false") (result i32)
    ;; Create a vector with some zero values
    v128.const i64x2 0 2
    i64x2.all_true
  )

  ;; Test i64x2.bitmask
  (func (export "test_i64x2_bitmask") (result i32)
    ;; Create a vector with the sign bit set in first lane
    v128.const i64x2 0x8000000000000000 0
    i64x2.bitmask
  )

  ;; Test i64x2.extend_low_i32x4_s
  (func (export "test_i64x2_extend_low_i32x4_s") (result i64)
    ;; Create a vector with 4 i32 values, test sign extension
    v128.const i32x4 -1 2 3 4
    i64x2.extend_low_i32x4_s
    ;; Extract first lane (should be -1 sign extended to i64)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.extend_high_i32x4_s
  (func (export "test_i64x2_extend_high_i32x4_s") (result i64)
    ;; Create a vector with 4 i32 values, test sign extension
    v128.const i32x4 1 2 -3 4
    i64x2.extend_high_i32x4_s
    ;; Extract first lane (should be -3 sign extended to i64)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.extend_low_i32x4_u
  (func (export "test_i64x2_extend_low_i32x4_u") (result i64)
    ;; Create a vector with 4 i32 values, test zero extension
    v128.const i32x4 -1 2 3 4
    i64x2.extend_low_i32x4_u
    ;; Extract first lane (should be -1 zero extended to i64)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.extend_high_i32x4_u
  (func (export "test_i64x2_extend_high_i32x4_u") (result i64)
    ;; Create a vector with 4 i32 values, test zero extension
    v128.const i32x4 1 2 -3 4
    i64x2.extend_high_i32x4_u
    ;; Extract first lane (should be -3 zero extended to i64)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.shl
  (func (export "test_i64x2_shl") (result i64)
    ;; Create a vector and shift left by 1
    v128.const i64x2 1 2
    i32.const 1
    i64x2.shl
    ;; Extract first lane (should be 2)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.shr_s
  (func (export "test_i64x2_shr_s") (result i64)
    ;; Create a vector with negative value and shift right by 1 (sign extended)
    v128.const i64x2 -4 -8
    i32.const 1
    i64x2.shr_s
    ;; Extract first lane (should be -2)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.shr_u
  (func (export "test_i64x2_shr_u") (result i64)
    ;; Create a vector with negative value and shift right by 1 (zero extended)
    v128.const i64x2 -4 -8
    i32.const 1
    i64x2.shr_u
    ;; Extract first lane (should be high bit cleared)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.add
  (func (export "test_i64x2_add") (result i64)
    ;; Add two vectors [1, 2] + [3, 4]
    v128.const i64x2 1 2
    v128.const i64x2 3 4
    i64x2.add
    ;; Extract first lane (should be 4)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.sub
  (func (export "test_i64x2_sub") (result i64)
    ;; Subtract two vectors [5, 6] - [3, 4]
    v128.const i64x2 5 6
    v128.const i64x2 3 4
    i64x2.sub
    ;; Extract first lane (should be 2)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.mul
  (func (export "test_i64x2_mul") (result i64)
    ;; Multiply two vectors [2, 3] * [4, 5]
    v128.const i64x2 2 3
    v128.const i64x2 4 5
    i64x2.mul
    ;; Extract first lane (should be 8)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.extmul_low_i32x4_s
  (func (export "test_i64x2_extmul_low_i32x4_s") (result i64)
    ;; ExtMul low i32x4 with sign extension
    v128.const i32x4 2 3 4 5
    v128.const i32x4 4 5 6 7
    i64x2.extmul_low_i32x4_s
    ;; Extract first lane (should be 2*4 = 8)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.extmul_high_i32x4_s
  (func (export "test_i64x2_extmul_high_i32x4_s") (result i64)
    ;; ExtMul high i32x4 with sign extension
    v128.const i32x4 2 3 4 5
    v128.const i32x4 4 5 6 7
    i64x2.extmul_high_i32x4_s
    ;; Extract first lane (should be 4*6 = 24)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.extmul_low_i32x4_u
  (func (export "test_i64x2_extmul_low_i32x4_u") (result i64)
    ;; ExtMul low i32x4 with zero extension
    v128.const i32x4 2 3 4 5
    v128.const i32x4 4 5 6 7
    i64x2.extmul_low_i32x4_u
    ;; Extract first lane (should be 2*4 = 8)
    i64x2.extract_lane 0
  )

  ;; Test i64x2.extmul_high_i32x4_u
  (func (export "test_i64x2_extmul_high_i32x4_u") (result i64)
    ;; ExtMul high i32x4 with zero extension
    v128.const i32x4 2 3 4 5
    v128.const i32x4 4 5 6 7
    i64x2.extmul_high_i32x4_u
    ;; Extract first lane (should be 4*6 = 24)
    i64x2.extract_lane 0
  )
) ;; Generated by ðŸ¤–
