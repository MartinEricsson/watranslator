import { readTestData } from "../test-utils.mjs";

// Generated by ü§ñ
async function testTypeConversionI64ToF64(debug = false) {
  try {
    const { wasmBuffer } = await readTestData('type-conversion-i64-f64/type-conversion-i64-f64.wat', debug);

    // Instantiate the WebAssembly module
    const { instance } = await WebAssembly.instantiate(wasmBuffer, {});

    const tests = [
      // Signed conversion tests
      { name: 'convert_i64_s_to_f64', expected: 42.0, func: 'convert_i64_s_to_f64', params: [42n] },
      { name: 'convert_i64_s_to_f64', expected: -42.0, func: 'convert_i64_s_to_f64', params: [-42n] },
      { name: 'convert_i64_s_to_f64', expected: 0.0, func: 'convert_i64_s_to_f64', params: [0n] },
      { name: 'convert_i64_s_to_f64', expected: 9223372036854775807, func: 'convert_i64_s_to_f64', params: [9223372036854775807n] }, // Max i64
      { name: 'convert_i64_s_to_f64', expected: -9223372036854775808, func: 'convert_i64_s_to_f64', params: [-9223372036854775808n] }, // Min i64
      
      // Unsigned conversion tests
      { name: 'convert_i64_u_to_f64', expected: 42.0, func: 'convert_i64_u_to_f64', params: [42n] },
      { name: 'convert_i64_u_to_f64', expected: 0.0, func: 'convert_i64_u_to_f64', params: [0n] },
      { name: 'convert_i64_u_to_f64', expected: 9223372036854775807, func: 'convert_i64_u_to_f64', params: [9223372036854775807n] }, // Max i64
      { name: 'convert_i64_u_to_f64', expected: 18446744073709551615, func: 'convert_i64_u_to_f64', params: [-1n] }, // Unsigned interpretation of -1
      { name: 'convert_i64_u_to_f64', expected: 10000000000000000000, func: 'convert_i64_u_to_f64', params: [10000000000000000000n] }, // Large value > 2^63
      
      // Direct tests
      { name: 'test_positive', expected: 42.0, func: 'test_positive', params: [] },
      { name: 'test_negative', expected: -42.0, func: 'test_negative', params: [] },
      { name: 'test_zero', expected: 0.0, func: 'test_zero', params: [] },
      { name: 'test_max_i64', expected: 9223372036854775807, func: 'test_max_i64', params: [] },
      { name: 'test_min_i64', expected: -9223372036854775808, func: 'test_min_i64', params: [] },
      { name: 'test_unsigned_large', expected: 18446744073709551615, func: 'test_unsigned_large', params: [] }, // 2^64-1
      { name: 'test_unsigned_medium', expected: 9223372036854775807, func: 'test_unsigned_medium', params: [] } // 2^63-1
    ];

    let results = [];

    for (const { name, expected, func, params } of tests) {
      const result = instance.exports[func](...params);
      
      // For float comparisons with large integers, we need a relative error check
      // since precision loss can occur for very large values
      const isLargeValue = Math.abs(expected) > 1e10;
      const isEqual = isLargeValue 
        ? Math.abs((result - expected) / expected) < 1e-10 
        : Math.abs(result - expected) < 0.00001;
      
      results.push(isEqual);
      
      if (debug || !isEqual) {
        console.log(`${name} with params [${params}]: result=${result}, expected=${expected}, ${isEqual ? '‚úÖ' : '‚ùå'}`);
      }
    }

    const allTestsPassed = results.every(result => result);
    if (allTestsPassed) {
      console.log("‚úÖ All f64.convert_i64_(s/u) tests passed!");
      return true;
    } else {
      console.error("‚ùå Some f64.convert_i64_(s/u) tests failed.");
      return false;
    }
  } catch (error) {
    console.error('Error during i64 to f64 type conversion test:', error);
    return false;
  }
}

export { testTypeConversionI64ToF64 };