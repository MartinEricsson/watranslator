// Generated by ü§ñ
import { readTestData } from '../test-utils.mjs';
import assert from 'assert';

async function testReferenceOpcodes(debug = false) {
  try {
    const { wasmBuffer } = await readTestData('reference-opcodes/reference-opcodes.wat', debug);
    const { instance } = await WebAssembly.instantiate(wasmBuffer, {});

    // Test direct function call first
    assert.strictEqual(instance.exports.add_one(41), 42, 'add_one should work directly');
    console.log('‚úÖ Direct function call test passed');

    // Test getting function reference
    const funcRef = instance.exports.get_func();
    assert(funcRef instanceof Function, 'get_func should return a function reference');
    assert.strictEqual(funcRef(41), 42, 'Function reference should be callable');
    console.log('‚úÖ Function reference test passed');

    // Test calling through table
    assert.strictEqual(instance.exports.test_call(41), 42, 'test_call should work through table');
    console.log('‚úÖ Table-based call test passed');

    // Test table contents
    assert(instance.exports.tbl instanceof WebAssembly.Table, 'Table should be exported');
    const tableFunc = instance.exports.tbl.get(0);
    assert(tableFunc instanceof Function, 'Table should contain function reference');
    assert.strictEqual(tableFunc(41), 42, 'Function from table should be callable');
    console.log('‚úÖ Table contents test passed');

    console.log('‚úÖ All reference opcode tests passed!');
    return true;
  } catch (error) {
    console.error('‚ùå Reference opcode test failed:', error);
    return false;
  }
}

export default testReferenceOpcodes;