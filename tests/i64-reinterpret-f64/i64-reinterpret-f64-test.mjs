import { readTestData } from '../test-utils.mjs';

// Generated by 🤖
async function testI64ReinterpretF64(debug = false) {
  try {
    const { wasmBuffer } = await readTestData('i64-reinterpret-f64/i64-reinterpret-f64.wat', debug);

    // Instantiate the WebAssembly module
    const { instance } = await WebAssembly.instantiate(wasmBuffer, {});

    const tests = [
      // Basic reinterpret test with a param
      { name: 'reinterpret_i64 (0)', expected: 0.0, func: 'reinterpret_i64', params: [0n] },
      { name: 'reinterpret_i64 (1.0 bit pattern)', expected: 1.0, func: 'reinterpret_i64', params: [0x3FF0000000000000n] },
      { name: 'reinterpret_i64 (-1.0 bit pattern)', expected: -1.0, func: 'reinterpret_i64', params: [0xBFF0000000000000n] },
      { name: 'reinterpret_i64 (NaN bit pattern)', expectedNaN: true, func: 'reinterpret_i64', params: [0x7FF8000000000000n] },
      { name: 'reinterpret_i64 (Infinity bit pattern)', expected: Infinity, func: 'reinterpret_i64', params: [0x7FF0000000000000n] },
      { name: 'reinterpret_i64 (-Infinity bit pattern)', expected: -Infinity, func: 'reinterpret_i64', params: [0xFFF0000000000000n] },
      { name: 'reinterpret_i64 (42.0 bit pattern)', expected: 42.0, func: 'reinterpret_i64', params: [0x4045000000000000n] },
      
      // Direct function tests
      { name: 'test_zero', expected: 0.0, func: 'test_zero', params: [] },
      { name: 'test_one', expected: 1.0, func: 'test_one', params: [] },
      { name: 'test_neg_one', expected: -1.0, func: 'test_neg_one', params: [] },
      { name: 'test_nan', expectedNaN: true, func: 'test_nan', params: [] },
      { name: 'test_infinity', expected: Infinity, func: 'test_infinity', params: [] },
      { name: 'test_neg_infinity', expected: -Infinity, func: 'test_neg_infinity', params: [] },
      { name: 'test_specific_bits', expected: 42.0, func: 'test_specific_bits', params: [] }
    ];

    let results = [];

    for (const { name, expected, expectedNaN, func, params } of tests) {
      const result = instance.exports[func](...params);
      
      let passed;
      if (expectedNaN) {
        passed = Number.isNaN(result);
        console.log(`${name}: result=NaN, expected=NaN - ${passed ? '✅' : '❌'}`);
      } else if (Object.is(expected, -0.0)) {
        passed = Object.is(result, -0.0);
        console.log(`${name}: result=${result} (negative zero?: ${passed}), expected=-0.0 - ${passed ? '✅' : '❌'}`);
      } else {
        passed = Object.is(result, expected);
        console.log(`${name}: result=${result}, expected=${expected} - ${passed ? '✅' : '❌'}`);
      }
      
      results.push(passed);
      if (!passed) {
        console.error(`❌ ${name} test failed.`);
      } else {
        console.log(`✅ ${name} test passed!`);
      }
    }

    const allTestsPassed = results.every(result => result);
    if (allTestsPassed) {
      console.log("✅ All f64.reinterpret_i64 tests passed!");
      return true;
    } else {
      console.error("❌ Some f64.reinterpret_i64 tests failed.");
      return false;
    }
  } catch (error) {
    console.error('Error during f64.reinterpret_i64 test:', error);
    console.error(error.stack);
    return false;
  }
}

export default testI64ReinterpretF64;