(module
  ;; Define a memory section with 1 page (64KB)
  (memory 1)
  
  ;; Export the memory
  (export "memory" (memory 0))
  
  ;; Data section to initialize memory with specific bytes
  ;; First byte is 0, second is 1, and we have FF (-1 signed) at position 8
  (data (i32.const 0)
    "\00\01\02\03\04\05\06\07\ff\fe"
  )
  
  ;; Test i64.load8_s - Load a byte and sign-extend to i64
  ;; Generated by 🤖
  (func $load_i64_8_s (param $addr i32) (result i64)
    local.get $addr
    i64.load8_s offset=0 align=0
  )
  
  ;; Test i64.load8_u - Load a byte and zero-extend to i64
  ;; Generated by 🤖
  (func $load_i64_8_u (param $addr i32) (result i64)
    local.get $addr
    i64.load8_u offset=0 align=0
  )

  ;; Test i64.load16_s - Load a 16-bit value and sign-extend to i64
  ;; Generated by 🤖
  (func $load_i64_16_s (param $addr i32) (result i64)
    local.get $addr
    i64.load16_s offset=0 align=0
  )

  ;; Test i64.load16_u - Load a 16-bit value and zero-extend to i64
  ;; Generated by 🤖
  (func $load_i64_16_u (param $addr i32) (result i64)
    local.get $addr
    i64.load16_u offset=0 align=0
  )

  ;; Test i64.load32_s - Load a 32-bit value and sign-extend to i64
  ;; Generated by 🤖
  (func $load_i64_32_s (param $addr i32) (result i64)
    local.get $addr
    i64.load32_s offset=0 align=0
  )

  ;; Test i64.load32_u - Load a 32-bit value and zero-extend to i64
  ;; Generated by 🤖
  (func $load_i64_32_u (param $addr i32) (result i64)
    local.get $addr
    i64.load32_u offset=0 align=0
  )
  
  ;; Export test functions
  (export "load_i64_8_s" (func $load_i64_8_s))
  (export "load_i64_8_u" (func $load_i64_8_u))
  (export "load_i64_16_s" (func $load_i64_16_s))
  (export "load_i64_16_u" (func $load_i64_16_u))
  (export "load_i64_32_s" (func $load_i64_32_s))
  (export "load_i64_32_u" (func $load_i64_32_u))
)