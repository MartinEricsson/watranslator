(module
  ;; Import memory for testing
  (memory (export "memory") 1)

  ;; Test v128.and operation
  (func (export "test_v128_and") (result i32)
    (local $result v128)
    ;; Create two v128 constants with specific bit patterns
    v128.const i32x4 0xFFFF0000 0xFFFF0000 0xFFFF0000 0xFFFF0000
    v128.const i32x4 0xFFFFFFFF 0x0000FFFF 0xFFFFFFFF 0x0000FFFF
    v128.and
    local.set $result
    ;; Extract lane and check if the result is as expected (0xFFFF0000)
    local.get $result
    i32x4.extract_lane 0
    i32.const 0xFFFF0000
    i32.eq
  )

  ;; Test v128.andnot operation
  (func (export "test_v128_andnot") (result i32)
    (local $result v128)
    ;; Create two v128 constants with specific bit patterns
    v128.const i32x4 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF 0xFFFFFFFF
    v128.const i32x4 0x0000FFFF 0x0000FFFF 0x0000FFFF 0x0000FFFF
    v128.andnot
    local.set $result
    ;; Extract lane and check if the result is as expected (0xFFFF0000)
    local.get $result
    i32x4.extract_lane 0
    i32.const 0xFFFF0000
    i32.eq
  )

  ;; Test v128.or operation
  (func (export "test_v128_or") (result i32)
    (local $result v128)
    ;; Create two v128 constants with specific bit patterns
    v128.const i32x4 0xFFFF0000 0x00000000 0xFFFF0000 0x00000000
    v128.const i32x4 0x0000FFFF 0x00000000 0x0000FFFF 0x00000000
    v128.or
    local.set $result
    ;; Extract lane and check if the result is as expected (0xFFFFFFFF)
    local.get $result
    i32x4.extract_lane 0
    i32.const 0xFFFFFFFF
    i32.eq
  )

  ;; Test v128.xor operation
  (func (export "test_v128_xor") (result i32)
    (local $result v128)
    ;; Create two v128 constants with specific bit patterns
    v128.const i32x4 0xFFFFFFFF 0x00000000 0xFFFFFFFF 0x00000000
    v128.const i32x4 0x0000FFFF 0x0000FFFF 0x0000FFFF 0x0000FFFF
    v128.xor
    local.set $result
    ;; Extract lane and check if the result is as expected (0xFFFF0000)
    local.get $result
    i32x4.extract_lane 0
    i32.const 0xFFFF0000
    i32.eq
  )

  ;; Test v128.bitselect operation
  (func (export "test_v128_bitselect") (result i32)
    (local $result v128)
    ;; Create three v128 constants for the operation
    v128.const i32x4 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA 0xAAAAAAAA ;; Value 1
    v128.const i32x4 0x55555555 0x55555555 0x55555555 0x55555555 ;; Value 2
    v128.const i32x4 0xFFFF0000 0xFFFF0000 0xFFFF0000 0xFFFF0000 ;; Mask
    v128.bitselect
    local.set $result
    ;; Extract lane and check if the result is as expected
    local.get $result
    i32x4.extract_lane 0
    i32.const 0xAAAA5555
    i32.eq
  )

  ;; Test v128.any_true operation
  (func (export "test_v128_any_true_true") (result i32)
    ;; Should return 1 (true) because at least one bit is set
    v128.const i32x4 0x00000001 0x00000000 0x00000000 0x00000000
    v128.any_true
  )

  (func (export "test_v128_any_true_false") (result i32)
    ;; Should return 0 (false) because no bits are set
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000
    v128.any_true
  )

  ;; Test v128.not operation
  (func (export "test_v128_not") (result i32)
    (local $result v128)
    ;; Create a v128 constant and apply not operation
    v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000
    v128.not
    local.set $result
    ;; Extract lane and check if the result is as expected (0xFFFFFFFF)
    local.get $result
    i32x4.extract_lane 0
    i32.const 0xFFFFFFFF
    i32.eq
  )
) ;; Generated by ðŸ¤–
