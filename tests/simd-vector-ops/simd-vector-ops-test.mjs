// filepath: /Users/martinericsson/dev/fes-compiler/tests/simd-vector-ops/simd-vector-ops-test.mjs
import { readTestData, logger } from '../test-utils.mjs';

async function testSIMDVectorOps(debug = false) {
    const log = logger(debug);
    try {
        const { wasmBuffer } = await readTestData('simd-vector-ops/simd-vector-ops.wat', debug);
        log('SIMD vector operations test WAT file loaded successfully');
        
        const { instance } = await WebAssembly.instantiate(wasmBuffer);
        log('SIMD vector operations test WASM module instantiated successfully');
        
        // Test v128.and operation
        const andResult = instance.exports.test_v128_and();
        log(`test_v128_and: got ${andResult}, expected 1`);
        if (andResult !== 1) {
            throw new Error(`v128.and test failed: expected 1, got ${andResult}`);
        }
        
        // Test v128.andnot operation
        const andnotResult = instance.exports.test_v128_andnot();
        log(`test_v128_andnot: got ${andnotResult}, expected 1`);
        if (andnotResult !== 1) {
            throw new Error(`v128.andnot test failed: expected 1, got ${andnotResult}`);
        }
        
        // Test v128.or operation
        const orResult = instance.exports.test_v128_or();
        log(`test_v128_or: got ${orResult}, expected 1`);
        if (orResult !== 1) {
            throw new Error(`v128.or test failed: expected 1, got ${orResult}`);
        }
        
        // Test v128.xor operation
        const xorResult = instance.exports.test_v128_xor();
        log(`test_v128_xor: got ${xorResult}, expected 1`);
        if (xorResult !== 1) {
            throw new Error(`v128.xor test failed: expected 1, got ${xorResult}`);
        }
        
        // Test v128.bitselect operation
        const bitselectResult = instance.exports.test_v128_bitselect();
        log(`test_v128_bitselect: got ${bitselectResult}, expected 1`);
        if (bitselectResult !== 1) {
            throw new Error(`v128.bitselect test failed: expected 1, got ${bitselectResult}`);
        }
        
        // Test v128.any_true operation (true case)
        const anyTrueResult = instance.exports.test_v128_any_true_true();
        log(`test_v128_any_true_true: got ${anyTrueResult}, expected 1`);
        if (anyTrueResult !== 1) {
            throw new Error(`v128.any_true (true case) test failed: expected 1, got ${anyTrueResult}`);
        }
        
        // Test v128.any_true operation (false case)
        const anyFalseResult = instance.exports.test_v128_any_true_false();
        log(`test_v128_any_true_false: got ${anyFalseResult}, expected 0`);
        if (anyFalseResult !== 0) {
            throw new Error(`v128.any_true (false case) test failed: expected 0, got ${anyFalseResult}`);
        }
        
        // Test v128.not operation
        const notResult = instance.exports.test_v128_not();
        log(`test_v128_not: got ${notResult}, expected 1`);
        if (notResult !== 1) {
            throw new Error(`v128.not test failed: expected 1, got ${notResult}`);
        }
        
        log('All SIMD vector operations tests passed!');
        return true;
    } catch (error) {
        console.error(`SIMD vector operations test failed: ${error.message}`);
        throw error;
    }
}

export default testSIMDVectorOps;
// Generated by ðŸ¤–
