import { readTestData } from '../test-utils.mjs';

// Generated by 🤖
async function testI64Store(debug = false) {
    try {
        const { wasmBuffer, ast } = await readTestData('memory-store/i64-store.wat', debug);

        const { instance } = await WebAssembly.instantiate(wasmBuffer, {});
        
        const tests = [
            { 
                name: "i64.store (full 64-bit)",
                storeFunc: "store_i64", 
                readFunc: "read_i64",
                addr: 0,
                value: 0x1234567890ABCDEFn,
                expected: 0x1234567890ABCDEFn
            },
            { 
                name: "i64.store8 (low 8 bits)",
                storeFunc: "store_i64_8", 
                readFunc: "read_i64_8_u",
                addr: 8,
                value: 0xFFn,
                expected: 0xFFn
            },
            { 
                name: "i64.store8 (truncated bits)",
                storeFunc: "store_i64_8", 
                readFunc: "read_i64_8_s",
                addr: 16,
                value: 0x12345678n,
                expected: 0x78n
            },
            { 
                name: "i64.store16 (low 16 bits)",
                storeFunc: "store_i64_16", 
                readFunc: "read_i64_16_u",
                addr: 24,
                value: 0xFFFFn,
                expected: 0xFFFFn
            },
            { 
                name: "i64.store16 (truncated bits)",
                storeFunc: "store_i64_16", 
                readFunc: "read_i64_16_u", // Using unsigned read
                addr: 32,
                value: 0x12345678ABCDn,
                expected: BigInt(0xABCD) // Only comparing low 16 bits
            },
            { 
                name: "i64.store32 (low 32 bits)",
                storeFunc: "store_i64_32", 
                readFunc: "read_i64_32_u",
                addr: 40,
                value: 0xFFFFFFFFn,
                expected: 0xFFFFFFFFn
            },
            { 
                name: "i64.store32 (truncated bits)",
                storeFunc: "store_i64_32", 
                readFunc: "read_i64_32_u", // Changed to unsigned read
                addr: 48,
                value: 0x12345678ABCDEF42n,
                expected: 0xABCDEF42n // Only keep the low 32 bits
            },
        ];

        let results = [];
        
        for (const test of tests) {
            // Store the value
            instance.exports[test.storeFunc](test.addr, test.value);
            
            // Read back the value
            const result = instance.exports[test.readFunc](test.addr);
            
            // Debug output to see actual values
            if (debug) {
                console.log(`${test.name}:`);
                console.log(`  Store value: 0x${test.value.toString(16)}`);
                console.log(`  Read value: 0x${result.toString(16)}`);
                console.log(`  Expected: 0x${test.expected.toString(16)}`);
            }
            
            // For direct debugging - see the exact values
            const expectedStr = test.expected.toString(16);
            const resultStr = result.toString(16);
            
            const testPassed = result === test.expected;
            results.push(testPassed);
            
            if (!testPassed) {
                console.log(`${test.name} - Value: 0x${test.value.toString(16)}, Expected: 0x${expectedStr}, Got: 0x${resultStr}`);
            }
            
            if (testPassed) {
                console.log(`✅ ${test.name} test passed!`);
            } else {
                console.error(`❌ ${test.name} test failed.`);
            }
        }
        
        // check if all tests passed
        const allTestsPassed = results.every(result => result);
        if (allTestsPassed) {
            console.log("✅ All i64 store tests passed!");
            return true;
        } else {
            console.error("❌ Some i64 store tests failed.");
            return false;
        }
    } catch (error) {
        console.error('❌ Error during i64 store tests:', error);
        console.error(error.stack);
        return false;
    }
}

export default testI64Store;