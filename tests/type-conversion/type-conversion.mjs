import { readTestData } from "../test-utils.mjs";

async function testTypeConversion(debug = false) {
    try {
        const { wasmBuffer } = await readTestData('type-conversion/type-conversion.wat', debug);

        const { instance } = await WebAssembly.instantiate(wasmBuffer, {});

        const tests = [
            { name: 'i32_trunc_f32_s', expected: 1, func: 'i32_trunc_f32_s', params: [1.5] },
            { name: 'i32_trunc_f32_s', expected: -1, func: 'i32_trunc_f32_s', params: [-1.5] },
            { name: 'i32_trunc_f32_u', expected: 1, func: 'i32_trunc_f32_u', params: [1.5] },
            { name: 'i32_trunc_f64_s', expected: 1, func: 'i32_trunc_f64_s', params: [1.5] },
            { name: 'i32_trunc_f64_s', expected: -1, func: 'i32_trunc_f64_s', params: [-1.5] },
            { name: 'i32_trunc_f64_u', expected: 1, func: 'i32_trunc_f64_u', params: [1.5] },
            { name: 'i32_trunc_f64_s', expected: 0, func: 'i32_trunc_f64_s', params: [0.7] },
            { name: 'i32_trunc_f64_s', expected: 2147483647, func: 'i32_trunc_f64_s', params: [2147483647.9] }, // Max i32
            { name: 'i32_trunc_f64_s', expected: -2147483648, func: 'i32_trunc_f64_s', params: [-2147483648.0] }, // Min i32
            { name: 'i32_trunc_f64_u', expected: 0, func: 'i32_trunc_f64_u', params: [0.1] },
            { name: 'i32_trunc_f64_u', expected: 4294967295, func: 'i32_trunc_f64_u', params: [4294967295.9] }, // Max u32
            { name: 'i32_trunc_sat_f32_s', expected: 1, func: 'i32_trunc_sat_f32_s', params: [1.5] },
            { name: 'i32_trunc_sat_f32_u', expected: 1, func: 'i32_trunc_sat_f32_u', params: [1.5] },
            { name: 'i32_reinterpret_f32', expected: 0, func: 'i32_reinterpret_f32', params: [0] },
            { name: 'i32_reinterpret_f32', expected: 0x3F800000, func: 'i32_reinterpret_f32', params: [1] },
            { name: 'i32_reinterpret_f32', expected: -1082130432, func: 'i32_reinterpret_f32', params: [-1] },
            { name: 'i32_extend8_s', expected: -1, func: 'i32_extend8_s', params: [0xFF] },
            { name: 'i32_extend16_s', expected: -1, func: 'i32_extend16_s', params: [0xFFFF] },
            { name: 'f32_convert_i32_s', expected: 42.0, func: 'f32_convert_i32_s', params: [42] },
            { name: 'f32_convert_i32_s', expected: -42.0, func: 'f32_convert_i32_s', params: [-42] },
            { name: 'f32_convert_i32_s', expected: 0.0, func: 'f32_convert_i32_s', params: [0] },
            { name: 'f32_convert_i32_u', expected: 42.0, func: 'f32_convert_i32_u', params: [42] },
            { name: 'f32_convert_i32_u', expected: 4294967040.0, func: 'f32_convert_i32_u', params: [0xFFFFFF00] }, // Large unsigned value
            { name: 'f32_convert_i32_u', expected: 0.0, func: 'f32_convert_i32_u', params: [0] },
            { name: 'i32_wrap_i64', expected: 0, func: 'i32_wrap_i64', params: [0n] },
            { name: 'i32_wrap_i64', expected: 42, func: 'i32_wrap_i64', params: [42n] },
            { name: 'i32_wrap_i64', expected: 0xFFFFFFFF, func: 'i32_wrap_i64', params: [0xFFFFFFFFFFFFFFFFn], unsigned: true }, // Large value  
            
            // Generated by ü§ñ
            { name: 'i64_trunc_sat_f32_s', expected: 42n, func: 'i64_trunc_sat_f32_s', params: [42.5] },
            { name: 'i64_trunc_sat_f32_s', expected: -42n, func: 'i64_trunc_sat_f32_s', params: [-42.5] },
            { name: 'i64_trunc_sat_f32_s', expected: 9223372036854775807n, func: 'i64_trunc_sat_f32_s', params: [1e20] }, // Max i64
            { name: 'i64_trunc_sat_f32_s', expected: -9223372036854775808n, func: 'i64_trunc_sat_f32_s', params: [-1e20] }, // Min i64
            
            // Generated by ü§ñ
            { name: 'i64_trunc_sat_f32_u', expected: 42n, func: 'i64_trunc_sat_f32_u', params: [42.5] },
            { name: 'i64_trunc_sat_f32_u', expected: 0n, func: 'i64_trunc_sat_f32_u', params: [-42.5] }, // Negative becomes 0
            { name: 'i64_trunc_sat_f32_u', expected: 18446744073709551615n, func: 'i64_trunc_sat_f32_u', params: [1e20] }, // Max u64
            
            // Generated by ü§ñ
            { name: 'i64_trunc_sat_f64_s', expected: 42n, func: 'i64_trunc_sat_f64_s', params: [42.5] },
            { name: 'i64_trunc_sat_f64_s', expected: -42n, func: 'i64_trunc_sat_f64_s', params: [-42.5] },
            { name: 'i64_trunc_sat_f64_s', expected: 9223372036854775807n, func: 'i64_trunc_sat_f64_s', params: [9223372036854775808.0] }, // Max i64
            { name: 'i64_trunc_sat_f64_s', expected: -9223372036854775808n, func: 'i64_trunc_sat_f64_s', params: [-9223372036854775809.0] }, // Min i64
            
            // Generated by ü§ñ
            { name: 'i64_trunc_sat_f64_u', expected: 42n, func: 'i64_trunc_sat_f64_u', params: [42.5] },
            { name: 'i64_trunc_sat_f64_u', expected: 0n, func: 'i64_trunc_sat_f64_u', params: [-42.5] }, // Negative becomes 0
            { name: 'i64_trunc_sat_f64_u', expected: 18446744073709551615n, func: 'i64_trunc_sat_f64_u', params: [18446744073709551616.0] }, // Max u64
        ];

        let results = [];

        for (const { name, expected, func, params, unsigned } of tests) {
            let result = instance.exports[func](...params);

            // Convert signed to unsigned for i32 wrap tests if needed
            if (unsigned && result < 0) {
                result = result >>> 0; // Convert signed to unsigned using zero-fill right shift
            }

            // For float comparisons, we need to handle special cases
            let resultRes;
            if (func.startsWith('f32_convert')) {
                // Use a small epsilon for float comparisons to account for precision issues
                const epsilon = 0.00001;
                resultRes = Math.abs(result - expected) < epsilon;
            } else if (func === 'i32_trunc_f64_u' && result < 0) {
                // Convert negative results to unsigned for i32_trunc_f64_u
                result = result >>> 0;
                resultRes = result === expected;
            } else if ((func === 'i64_trunc_sat_f64_u' || func === 'i64_trunc_sat_f32_u') && result === -1n) {
                // Generated by ü§ñ
                // Special case for max u64 which is represented as -1n in signed context
                resultRes = expected === 18446744073709551615n;
            } else {
                resultRes = result === expected;
            }

            console.assert(resultRes, `‚ùå ${name} should return ${expected}, got ${result}`);
            results.push(resultRes);
            if (debug) {
                console.log(`Debug: ${name} - Expected: ${expected}, Got: ${result}`);
            }
            if (resultRes) {
                console.log(`‚úÖ ${name} test passed!`);
            } else {
                console.error(`‚ùå ${name} test failed.`);
            }
        }

        // check if all tests passed
        const allTestsPassed = results.every(result => result);
        if (allTestsPassed) {
            console.log("‚úÖ All type conversion tests passed!");
            return true;
        } else {
            console.error("‚ùå Some type conversion tests failed.");
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error testing type conversion:', error);
        return false;
    }
}

export default testTypeConversion;
