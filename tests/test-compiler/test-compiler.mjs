import { writeWASMFile } from '../../src/test-utils/file-utils.mjs';
import { fileURLToPath } from 'url';
import path from 'path';
import { existsSync } from 'fs';
import { readTestData, logger } from '../test-utils.mjs';

// Get directory name for current file
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function testCompilation(debug = false) {
    const log = logger(debug);
    try {
        log('Reading WAT file...');
        log('Reading WAT file...', "ERROR");
        const { wasmBuffer, ast } = await readTestData('test-compiler/example.wat', debug);

        log('AST created:');
        log(JSON.stringify(ast, null, 2));

        log(`WASM binary created: ${wasmBuffer.byteLength} bytes`);
        // Generated by ü§ñ

        // Write the WASM file
        const wasmFilePath = path.join(__dirname, 'example.wasm');
        await writeWASMFile(wasmFilePath, wasmBuffer);
        log(`WASM file written to ${wasmFilePath}`);

        // Verify the WASM file exists
        if (existsSync(wasmFilePath)) {
            log('Verification: WASM file created successfully.');
        } else {
            log('‚ùå Verification failed: WASM file was not created.', "ERROR");
            return false;
        }

        // Try to use WebAssembly API if available (Node.js >= 8.0.0)
        if (typeof WebAssembly !== 'undefined') {
            log('Testing WebAssembly instantiation...');

            // Using synchronous API for simplicity in this test
            const wasmModule = new WebAssembly.Module(wasmBuffer);
            const instance = new WebAssembly.Instance(wasmModule);

            // Check for exported functions
            log(`Exported functions: ${Object.keys(instance.exports)}`);

            // Try to call the add function
            if (typeof instance.exports.add === 'function') {
                const result = instance.exports.add(5, 7);
                log(`Result of add(5, 7): ${result}`);

                if (result === 12) {
                    log('‚úÖ Verification: WASM function works correctly!');
                } else {
                    log(`‚ùå Verification failed: Expected 12, got ${result}`, "ERROR");
                    return false;
                }
            } else {
                log('‚ùå Verification failed: add function not found in exports', "ERROR");
                return false;
            }
        }

        return true;
    } catch (error) {
        log(`Error during compilation test: ${error}`, "ERROR");
        return false;
    }
}

export default testCompilation;