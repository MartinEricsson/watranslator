(module
  ;; Import memory for testing
  (memory (export "memory") 1)

  ;; Initialize memory with test vectors
  (data (i32.const 0) "\00\01\02\03\04\05\06\07\08\09\0a\0b\0c\0d\0e\0f")
  (data (i32.const 16) "\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f")
  
  ;; Test i8x16.swizzle 
  (func $i8x16_swizzle_test (export "i8x16_swizzle_test") (result i32)
    ;; Load first v128 with bytes 0-15
    i32.const 0
    v128.load
    
    ;; Load second v128 with indices to swizzle
    ;; Using [1, 3, 5, 7, 9, 11, 13, 15, 0, 2, 4, 6, 8, 10, 12, 14]
    v128.const i8x16 1 3 5 7 9 11 13 15 0 2 4 6 8 10 12 14
    
    ;; Swizzle operation will select bytes from first vector according to indices in second
    i8x16.swizzle
    
    ;; Extract first lane - should be value at index 1 which is 1
    i8x16.extract_lane_u 0
  )
  
  ;; Test i8x16.splat
  (func $i8x16_splat_test (export "i8x16_splat_test") (result i32) (local v128)
    ;; Create a v128 where all 16 lanes contain the value 42
    i32.const 42
    i8x16.splat
    
    ;; Store v128 in local variable
    local.set 0
    
    ;; Sum first 4 lanes (should be 42 * 4 = 168)
    local.get 0
    i8x16.extract_lane_u 0
    
    local.get 0
    i8x16.extract_lane_u 1
    i32.add
    
    local.get 0
    i8x16.extract_lane_u 2
    i32.add
    
    local.get 0
    i8x16.extract_lane_u 3
    i32.add
  ) ;; Generated by 🤖
  
  ;; Test i16x8.splat
  (func $i16x8_splat_test (export "i16x8_splat_test") (result i32)
    ;; Create a v128 where all 8 lanes contain the value 1000
    i32.const 1000
    i16x8.splat
    
    ;; Extract a lane and return it
    i16x8.extract_lane_u 3
  ) ;; Generated by 🤖
  
  ;; Test i32x4.splat
  (func $i32x4_splat_test (export "i32x4_splat_test") (result i32)
    ;; Create a v128 where all 4 lanes contain the value 12345
    i32.const 12345
    i32x4.splat
    
    ;; Extract a lane and return it
    i32x4.extract_lane 2
  ) ;; Generated by 🤖
  
  ;; Test i64x2.splat
  (func $i64x2_splat_test (export "i64x2_splat_test") (result i64)
    ;; Create a v128 where both lanes contain the value 9876543210
    i64.const 9876543210
    i64x2.splat
    
    ;; Extract a lane and return it
    i64x2.extract_lane 1
  ) ;; Generated by 🤖
  
  ;; Test f32x4.splat
  (func $f32x4_splat_test (export "f32x4_splat_test") (result f32)
    ;; Create a v128 where all 4 lanes contain the value 3.14159
    f32.const 3.14159
    f32x4.splat
    
    ;; Extract a lane and return it
    f32x4.extract_lane 0
  ) ;; Generated by 🤖
  
  ;; Test f64x2.splat
  (func $f64x2_splat_test (export "f64x2_splat_test") (result f64)
    ;; Create a v128 where both lanes contain the value 2.71828
    f64.const 2.71828
    f64x2.splat
    
    ;; Extract a lane and return it
    f64x2.extract_lane 1
  ) ;; Generated by 🤖
)
