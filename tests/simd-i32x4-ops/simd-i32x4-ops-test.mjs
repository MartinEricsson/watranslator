// Generated by ðŸ¤–
import { readTestData, logger } from '../test-utils.mjs';

async function testSIMDi32x4Ops(debug = false) {
  const log = logger(debug);
  try {
    const { wasmBuffer } = await readTestData('simd-i32x4-ops/simd-i32x4-ops.wat', debug);
    log('SIMD i32x4 operations test WAT file loaded successfully');
    
    const { instance } = await WebAssembly.instantiate(wasmBuffer);
    log('SIMD i32x4 operations test WASM module instantiated successfully');
    
    // Test i32x4.abs
    const absResult = instance.exports.i32x4_abs_test();
    log(`i32x4_abs_test: ${absResult}`);
    if (absResult <= 0) {
      throw new Error(`i32x4.abs test failed: expected positive value, got ${absResult}`);
    }
    
    // Test i32x4.neg
    const negResult = instance.exports.i32x4_neg_test();
    log(`i32x4_neg_test: ${negResult}`);
    
    // Test i32x4.all_true
    const allTrueResult = instance.exports.i32x4_all_true_test();
    log(`i32x4_all_true_test: ${allTrueResult}`);
    
    // Test i32x4.bitmask
    const bitmaskResult = instance.exports.i32x4_bitmask_test();
    log(`i32x4_bitmask_test: ${bitmaskResult}`);
    
    // Test extension operations
    const extendLowSResult = instance.exports.i32x4_extend_low_i16x8_s_test();
    log(`i32x4_extend_low_i16x8_s_test: ${extendLowSResult}`);
    
    const extendHighSResult = instance.exports.i32x4_extend_high_i16x8_s_test();
    log(`i32x4_extend_high_i16x8_s_test: ${extendHighSResult}`);
    
    const extendLowUResult = instance.exports.i32x4_extend_low_i16x8_u_test();
    log(`i32x4_extend_low_i16x8_u_test: ${extendLowUResult}`);
    
    const extendHighUResult = instance.exports.i32x4_extend_high_i16x8_u_test();
    log(`i32x4_extend_high_i16x8_u_test: ${extendHighUResult}`);
    
    // Test shift operations
    const shlResult = instance.exports.i32x4_shl_test();
    log(`i32x4_shl_test: ${shlResult}`);
    
    const shrSResult = instance.exports.i32x4_shr_s_test();
    log(`i32x4_shr_s_test: ${shrSResult}`);
    
    const shrUResult = instance.exports.i32x4_shr_u_test();
    log(`i32x4_shr_u_test: ${shrUResult}`);
    
    // Test arithmetic operations
    const addResult = instance.exports.i32x4_add_test();
    log(`i32x4_add_test: ${addResult}`);
    
    const subResult = instance.exports.i32x4_sub_test();
    log(`i32x4_sub_test: ${subResult}`);
    
    const mulResult = instance.exports.i32x4_mul_test();
    log(`i32x4_mul_test: ${mulResult}`);
    
    // Test min/max operations
    const minSResult = instance.exports.i32x4_min_s_test();
    log(`i32x4_min_s_test: ${minSResult}`);
    
    const minUResult = instance.exports.i32x4_min_u_test();
    log(`i32x4_min_u_test: ${minUResult}`);
    
    const maxSResult = instance.exports.i32x4_max_s_test();
    log(`i32x4_max_s_test: ${maxSResult}`);
    
    const maxUResult = instance.exports.i32x4_max_u_test();
    log(`i32x4_max_u_test: ${maxUResult}`);
    
    // Test dot product operation
    const dotResult = instance.exports.i32x4_dot_i16x8_s_test();
    log(`i32x4_dot_i16x8_s_test: ${dotResult}`);
    
    // Test extended multiplication operations
    const extmulLowSResult = instance.exports.i32x4_extmul_low_i16x8_s_test();
    log(`i32x4_extmul_low_i16x8_s_test: ${extmulLowSResult}`);
    
    const extmulHighSResult = instance.exports.i32x4_extmul_high_i16x8_s_test();
    log(`i32x4_extmul_high_i16x8_s_test: ${extmulHighSResult}`);
    
    const extmulLowUResult = instance.exports.i32x4_extmul_low_i16x8_u_test();
    log(`i32x4_extmul_low_i16x8_u_test: ${extmulLowUResult}`);
    
    const extmulHighUResult = instance.exports.i32x4_extmul_high_i16x8_u_test();
    log(`i32x4_extmul_high_i16x8_u_test: ${extmulHighUResult}`);
    
    // Test extended add pairwise operations
    const extaddPairwiseSResult = instance.exports.i32x4_extadd_pairwise_i16x8_s_test();
    log(`i32x4_extadd_pairwise_i16x8_s_test: ${extaddPairwiseSResult}`);
    
    const extaddPairwiseUResult = instance.exports.i32x4_extadd_pairwise_i16x8_u_test();
    log(`i32x4_extadd_pairwise_i16x8_u_test: ${extaddPairwiseUResult}`);
    
    log('All SIMD i32x4 operation tests passed successfully');
    return true;
  } catch (error) {
    console.error(`SIMD i32x4 operations test failed: ${error.message}`);
    throw error;
  }
}

export default testSIMDi32x4Ops;
