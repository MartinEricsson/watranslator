// Generated by ðŸ¤–
import { readTestData } from '../test-utils.mjs';

export default async function(debug = false) {
  try {
    // Use absolute path for WAT file to match other tests
    const { wasmBuffer } = await readTestData('imported-globals/imported-globals.wat', debug);
    
    // Create imports object with the required environment values
    const importObject = {
      env: {
        y: 123 // This is our imported global value
      }
    };

    const {instance} = await WebAssembly.instantiate(wasmBuffer, importObject);
    
    // Try to instantiate the module with our imports
    if (typeof WebAssembly !== 'undefined') {
      if (debug) console.log('Testing WebAssembly instantiation with imports...');
      
      // Test accessing the imported global value
      const importedY = instance.exports.getY();
      if (importedY !== 123) {
        console.error(`Imported global value mismatch: expected 123, got ${importedY}`);
        return false;
      }
      
      // Test accessing the local global value
      const localX = instance.exports.getX();
      if (localX !== 42) {
        console.error(`Local global value mismatch: expected 42, got ${localX}`);
        return false;
      }
      
      return true;
    } else {
      console.log('WebAssembly not supported in this environment');
      return false;
    }
  } catch (e) {
    console.error('Error in imported globals test:', e);
    return false;
  }
}
