import testCompilation from "./test-compiler/test-compiler.mjs";
import testEmptyModuleCompilation from "./empty-module/empty-module-test.mjs";
import testLocalVariables from "./local-vars/local-vars-test.mjs";
import testControlFlow from "./control-flow/control-flow-test.mjs";
import testSimpleLoop from "./simple-loop/simple-loop-test.mjs";
import testSubtraction from "./subtraction/subtraction-test.mjs";
import testDivision from "./division/division-test.mjs";
import testRemainder from "./remainder/remainder-test.mjs";
import testF32Operations from "./f32-ops/f32-ops-test.mjs";
import testF32Load from "./f32-ops/f32-load-test.mjs";
import testF32Store from "./f32-ops/f32-store-test.mjs";
import testBitManipulation from "./bit-manipulation/bit-manipulation-test.mjs";
import testComparisonOps from "./comparison-ops/comparison-ops-test.mjs";
import testF32MathOperations from "./f32-math/f32-math-test.mjs";
import testMemoryLoad from "./memory-load/memory-load-test.mjs";
import testMemoryi64Load from "./memory-load/i64-load-test.mjs";
import testMemoryStore from "./memory-store/memory-store-test.mjs";
import testMemoryStorei32 from "./memory-store/i32-store-test.mjs";
import testMemoryStorei64 from "./memory-store/i64-store-test.mjs";
import testMemorySizeGrow from "./memory-size-grow/memory-size-grow-test.mjs";
import testFunctionCalls from "./function-calls/function-calls-test.mjs";
import testGlobalVariables from "./global-variables/global-variables-test.mjs";
import testDataSection from "./data-section/data-section-test.mjs";
import testMemoryFill from "./memory-fill/memory-fill-test.mjs";
import testBulkMemory from "./bulk-memory/bulk-memory-test.mjs";
import testEarlyReturn from "./early-return/early-return-test.mjs";
import testDropInstruction from "./drop/drop-test.mjs";
import testEncodingi32 from "./encoding-i32/encoding-i32-test.mjs";
import testBitCnt from "./bit-cnt/bit-cnt-test.mjs";
import testTypeConversion from "./type-conversion/type-conversion.mjs";
import testi64MathAndOps from "./i64-math-and-ops/i64-math-and-ops-test.mjs";
import testUnreachable from "./unreachable/unreachable-test.mjs";
import TestF64MathAndOps from "./f64-math-and-ops/f64-math-and-ops-test.mjs";
import TestF64Load from "./f64-math-and-ops/f64-load-test.mjs";
import TestF64Store from "./f64-math-and-ops/f64-store-test.mjs";
import testMultiValue from "./multi-value/multi-value-test.mjs";
import { testTypeConversionF64 } from "./type-conversion-f64/type-conversion-f64-test.mjs";
import { testTypeConversionI64ToF64 } from "./type-conversion-i64-f64/type-conversion-i64-f64-test.mjs";
import testI64ReinterpretF64 from "./i64-reinterpret-f64/i64-reinterpret-f64-test.mjs";
import testF64PromoteF32 from "./f64-promote-f32/f64-promote-f32-test.mjs";
import testMemoryInit from "./memory-init/memory-init-test.mjs";
import testTableFuncref from "./table-funcref/table-funcref-test.mjs";
import testStartInstruction from "./start-instruction/start-instruction-test.mjs";
import testSelect from "./select/select-test.mjs";
import testTypedSelect from "./select/select-typed-test.mjs";
import testBrTable from "./br-table/br-table-test.mjs";
import { testMultipleFunctionArguments } from "./multiple-function-arguments/multiple-function-arguments.mjs";
import { testCallIndirect } from "./call-indirect/call-indirect-test.mjs";
import testAlignmentValidation from "./alignment-validation/alignment-validation-test.mjs";
import testErrorHandling from "./error-handling/error-handling-test.mjs";
//import testTableInit from "./table-init/table-init-test.mjs";
import testTableCopy from "./table-copy/table-copy-test.mjs";
import testTableGrow from "./table-grow/table-grow-test.mjs";
import testReferenceOpcodes from "./reference-opcodes/reference-opcodes-test.mjs";
import testRefIsNull from "./reference-opcodes/ref-is-null-test.mjs";
import testElemDrop from "./elem-drop/elem-drop-test.mjs";
import testTableFill from "./table-fill/table-fill-test.mjs";
import testAtomicMemory from "./atomic-memory/atomic-memory-test.mjs";
import testSharedMemory from "./memory-shared/memory-shared-test.mjs";
import testSharedMemoryFlags from "./memory-shared/memory-shared-flags-test.mjs"; // Generated by 🤖
import testComprehensiveSharedMemory from "./memory-shared/memory-comprehensive-test.mjs"; // Generated by 🤖
import testAtomicWaitNotify from "./atomic-wait-notify/atomic-wait-notify-test.mjs";
import testAtomicOps from "./atomic-ops/atomic-ops-test.mjs";
import testImportedGlobals from "./imported-globals/imported-globals-test.mjs";
import testImportedFunctions from "./imported-functions/imported-functions-test.mjs";
import testLoopSum from "./integrations/loop-test/loop-sum.mjs";
import testSIMDConst from "./simd-const/simd-const-test.mjs";
import testSIMDShuffle from "./simd-shuffle/simd-shuffle-test.mjs";
import testSIMDExtractLaneS from "./simd-extract-lane-s/simd-extract-lane-s-test.mjs";
import simdReplaceLaneTest from "./simd-replace-lane/simd-replace-lane-test.mjs";
import simdExtractLaneI16x8Test from "./simd-extract-lane-i16x8/simd-extract-lane-i16x8-test.mjs";
import simdReplaceAllLaneTest from "./simd-replace-lane/simd-replace-lane-all-test.mjs";
import testSIMDMemory from "./simd-memory/simd-memory-test.mjs";
import testAnonymousLocalVars from "./anon-local-vars/anon-local-vars-test.mjs";
import testSIMDSwizzleSplat from "./simd-swizzle-splat/simd-swizzle-splat-test.mjs";
import testSIMDI16x8Compare from "./simd-i16x8-compare/simd-i16x8-compare-test.mjs";
import testSIMDi32x4Compare from "./simd-i32x4-compare/simd-i32x4-compare-test.mjs";
import testSIMDI64x2Compare from "./simd-i64x2-compare/simd-i64x2-compare-test.mjs";
import testSIMDf32x4Compare from "./simd-f32x4-compare/simd-f32x4-compare-test.mjs";
import testSIMDF64x2Compare from "./simd-f64x2-compare/simd-f64x2-compare-test.mjs";
import testSIMDVectorOps from "./simd-vector-ops/simd-vector-ops-test.mjs";
import testSIMDi8x16Ops from "./simd-i8x16-ops/simd-i8x16-ops-test.mjs";
import testSIMDi16x8Ops from "./simd-i16x8-ops/simd-i16x8-ops-test.mjs";
import testSIMDi32x4Ops from "./simd-i32x4-ops/simd-i32x4-ops-test.mjs";
import testSIMDi64x2Ops from "./simd-i64x2-ops/simd-i64x2-ops-test.mjs";
import testSIMDf32x4Ops from "./simd-f32x4-ops/simd-f32x4-ops-test.mjs";
import testSIMDf64x2Ops from "./simd-f64x2-ops/simd-f64x2-ops-test.mjs";
import testSIMDConversionOps from "./simd-conversion-ops/simd-conversion-ops-test.mjs";
import testImportedFunctionOrdered from "./imported-functions/imported-functions-ordered-test.mjs";
import testMultiMemory from "./multi-memory/multi-memory-test.mjs";
import testMultiMemoryIndexes from "./multi-memory/multi-memory-indexes-test.mjs";

const args = process.argv.slice(2);
const debug = args.includes('--debug');

const tablePositiveResult = {};
const tableNegativeResult = {};

const resultVerification = (name, result) => {
    if (result) {
        console.log(`✅ ${name} test passed!`);
        tablePositiveResult[name] = { Result: '✅ Passed' };
    } else {
        console.error(`❌ ${name} test failed.`);
        tableNegativeResult[name] = { Result: '❌ Failed' };
    }
}

const writeSummary = testCases => {
    console.log('-----------------------------------');
    console.log(`Test cases total: ${testCases.length}`);
    console.log(`Test cases passed: ${Object.keys(tablePositiveResult).length}`);
    console.log(`Test cases failed: ${Object.keys(tableNegativeResult).length}`);
    console.log('-----------------------------------');
}

async function runTests() {
    const testCases = [
        { name: "Alignment Validation", test: testAlignmentValidation },
        { name: "Anonymous Local Variables", test: testAnonymousLocalVars },
        { name: "Atomic memory", test: testAtomicMemory },
        { name: "Atomic Wait Notify", test: testAtomicWaitNotify },
        { name: "Atomic ops", test: testAtomicOps },
        { name: "Basic Compiler", test: testCompilation },
        { name: "Bit Count", test: testBitCnt },
        { name: "Bit Manipulation", test: testBitManipulation },
        { name: "Bulk Memory", test: testBulkMemory },
        { name: "Br Table", test: testBrTable },
        { name: "Call Indirect", test: testCallIndirect },
        { name: "Comparison Operations", test: testComparisonOps },
        { name: "Control Flow", test: testControlFlow },
        { name: "Data Section", test: testDataSection },
        { name: "Division", test: testDivision },
        { name: "Drop Instruction", test: testDropInstruction },
        { name: "Early return", test: testEarlyReturn },
        { name: "Elem Drop", test: testElemDrop },
        { name: "Empty Module", test: testEmptyModuleCompilation },
        { name: "Encoding i32", test: testEncodingi32 },
        { name: "Error handling", test: testErrorHandling },
        { name: "F32 Math Operations", test: testF32MathOperations },
        { name: "F32 Load", test: testF32Load },
        { name: "F32 Operations", test: testF32Operations },
        { name: "F32 Store", test: testF32Store },
        { name: "F64 Math and Ops", test: TestF64MathAndOps },
        { name: "F64 Promote f32", test: testF64PromoteF32 },
        { name: "F64 Load", test: TestF64Load },
        { name: "F64 Store", test: TestF64Store },
        { name: "Function Calls", test: testFunctionCalls },
        { name: "Global Variables", test: testGlobalVariables },
        { name: "i64 Math and Ops", test: testi64MathAndOps },
        { name: "i64 Reinterpret F64", test: testI64ReinterpretF64 },
        { name: "Integration loop sum", test: testLoopSum },
        { name: "Imported Global Variables", test: testImportedGlobals },
        { name: "Imported Function Calls", test: testImportedFunctions },
        { name: "Imported Function Calls Ordered", test: testImportedFunctionOrdered },
        { name: "Local Variables", test: testLocalVariables },
        { name: "Memory fill", test: testMemoryFill },
        { name: "Memory Init", test: testMemoryInit },
        { name: "Memory Load", test: testMemoryLoad },
        { name: "Memory i64 Load", test: testMemoryi64Load },
        { name: "Memory Store i32", test: testMemoryStorei32 },
        { name: "Memory Store i64", test: testMemoryStorei64 },
        { name: "Memory Size and Grow", test: testMemorySizeGrow },
        { name: "Memory Store", test: testMemoryStore },
        { name: "Multiple Function Arguments", test: testMultipleFunctionArguments },
        { name: "Multi Memory", test: testMultiMemory },
        { name: "Multi Memory Indexes", test: testMultiMemoryIndexes },
        { name: "Multi Value", test: testMultiValue },
        { name: "Reference Is Null", test: testRefIsNull },
        { name: "Remainder", test: testRemainder },
        { name: "Simple Loop", test: testSimpleLoop },
        { name: "Shared Memory", test: testSharedMemory },
        { name: "Shared Memory Flags", test: testSharedMemoryFlags }, // Generated by 🤖
        { name: "Comprehensive Shared Memory", test: testComprehensiveSharedMemory }, // Generated by 🤖
        { name: "SIMD Const", test: testSIMDConst },
        { name: "SIMD Conversion Ops", test: testSIMDConversionOps },
        { name: "SIMD I16x8 Compare", test: testSIMDI16x8Compare },
        { name: "SIMD I32x4 Compare", test: testSIMDi32x4Compare },
        { name: "SIMD I32x4 Ops", test: testSIMDi32x4Ops },
        { name: "SIMD I64x2 Compare", test: testSIMDI64x2Compare },
        { name: "SIMD I64x2 Ops", test: testSIMDi64x2Ops },
        { name: "SIMD I8x16 Ops", test: testSIMDi8x16Ops },
        { name: "SIMD I16x8 Ops", test: testSIMDi16x8Ops },
        { name: "SIMD F32x4 Compare", test: testSIMDf32x4Compare },
        { name: "SIMD F32x4 Ops", test: testSIMDf32x4Ops },
        { name: "SIMD F64x2 Compare", test: testSIMDF64x2Compare },
        { name: "SIMD F64x2 Ops", test: testSIMDf64x2Ops },
        { name: "SIMD Extract Lane S", test: testSIMDExtractLaneS },
        { name: "SIMD Extract Lane I16x8", test: simdExtractLaneI16x8Test },
        { name: "SIMD Memory", test: testSIMDMemory },
        { name: "SIMD Shuffle", test: testSIMDShuffle },
        { name: "SIMD Swizzle and Splat", test: testSIMDSwizzleSplat },
        { name: "SIMD Replace Lane", test: simdReplaceLaneTest },
        { name: "SIMD Replace All Lane", test: simdReplaceAllLaneTest },
        { name: "SIMD Vector Ops", test: testSIMDVectorOps },
        { name: "Select", test: testSelect },
        { name: "Subtraction", test: testSubtraction },
        { name: "Start instruction", test: testStartInstruction },
        { name: "Table Copy", test: testTableCopy },
        { name: "Table Fill", test: testTableFill },
        //{ name: "Table Init", test: testTableInit },
        { name: "Table Grow", test: testTableGrow },
        { name: "Table Funcref", test: testTableFuncref },
        { name: "Type Conversion", test: testTypeConversion },
        { name: "Type Conversion F64", test: testTypeConversionF64 },
        { name: "Type Conversion i64 to F64", test: testTypeConversionI64ToF64 },
        { name: "Typed Select", test: testTypedSelect },
        { name: "Unreachable", test: testUnreachable },
        { name: "Reference Opcodes", test: testReferenceOpcodes },
    ];
    const testResults = testCases.map(async ({ name, test }) => {
        console.log(`Running ${name} test...`);
        const result = await test(debug);
        resultVerification(name, result);
        return result;
    });

    const allTestsPassed = await Promise.all(testResults).then(results => results.every(result => result));
    console.table(tablePositiveResult);

    if (allTestsPassed) {
        console.log("✅ All tests passed!");
        writeSummary(testCases);
    }
    else {
        console.table(tableNegativeResult);
        console.error("❌ Some tests failed.");
        writeSummary(testCases);
        throw new Error("Test failures detected.");
    }
}

runTests().catch(err => {
    console.error("Tests failed:", err, debug ? 'Debug mode enabled.' : '');
    process.exit(1);
});
