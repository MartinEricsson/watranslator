import { readTestData, logger } from '../test-utils.mjs';

async function debugSIMDOffset(debug = true) {
    const log = (msg) => console.log(msg);
    try {
        const { wasmBuffer } = await readTestData('simd-memory/debug-offset.wat', debug);
        log('Debug SIMD offset test WAT file loaded successfully');
        
        const { instance } = await WebAssembly.instantiate(wasmBuffer);
        log('Debug SIMD offset test WASM module instantiated successfully');
        
        // First, verify the memory content is correct
        const memory = instance.exports.memory;
        const bytes = new Uint8Array(memory.buffer);
        
        // Print the first 32 bytes of memory
        let memoryContent = 'Memory content: ';
        for (let i = 0; i < 32; i++) {
            memoryContent += bytes[i].toString(16).padStart(2, '0') + ' ';
            if (i === 15) memoryContent += '| ';
        }
        log(memoryContent);
        
        // Verify specific bytes using our helper function
        const byte0 = instance.exports.read_byte_at_offset(0);
        log(`Byte at offset 0: 0x${byte0.toString(16).padStart(2, '0')}, expected 0x00`);
        
        const byte16 = instance.exports.read_byte_at_offset(16);
        log(`Byte at offset 16: 0x${byte16.toString(16).padStart(2, '0')}, expected 0xaa`);
        
        // Now test the SIMD load with offset
        const loadOffsetResult = instance.exports.test_v128_load_offset();
        log(`test_v128_load_offset: got 0x${loadOffsetResult.toString(16).padStart(2, '0')}, expected 0xaa`);
        
        if (loadOffsetResult !== 0xaa) {
            throw new Error(`v128.load with offset test failed: expected 0xaa, got 0x${loadOffsetResult.toString(16).padStart(2, '0')}`);
        } else {
            log('SIMD offset test passed! ðŸŽ‰');
        }
        
    } catch (error) {
        log(`Error during debug test: ${error.message}`);
        console.error(error);
        throw error;
    }
}

debugSIMDOffset().catch(console.error);
// Generated by ðŸ¤–
