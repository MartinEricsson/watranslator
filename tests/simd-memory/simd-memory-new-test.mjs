import { readTestData, logger } from '../test-utils.mjs';

async function testSIMDMemoryNew(debug = false) {
    const log = logger(debug);
    try {
        const { wasmBuffer } = await readTestData('simd-memory/simd-memory-new.wat', debug);
        log('SIMD memory test WAT file loaded successfully');
        
        const { instance } = await WebAssembly.instantiate(wasmBuffer);
        log('SIMD memory test WASM module instantiated successfully');
        
        // Test basic v128.load
        const loadResult = instance.exports.test_v128_load();
        log(`test_v128_load: got ${loadResult}, expected 0`);
        if (loadResult !== 0) {
            throw new Error(`v128.load test failed: expected 0, got ${loadResult}`);
        }
        
        // Test v128.load with offset
        const loadOffsetResult = instance.exports.test_v128_load_offset();
        log(`test_v128_load_offset: got ${loadOffsetResult.toString(16)}, expected 0xaa`);
        if (loadOffsetResult !== 0xaa) {
            throw new Error(`v128.load with offset test failed: expected 0xaa, got ${loadOffsetResult.toString(16)}`);
        }
        
        // Test v128.store and load
        const storeResult = instance.exports.test_v128_store();
        log(`test_v128_store: got ${storeResult}, expected 0x42`);
        if (storeResult !== 0x42) {
            throw new Error(`v128.store test failed: expected 0x42, got ${storeResult}`);
        }
        
        // Test v128.load8_splat
        const load8SplatResult = instance.exports.test_v128_load8_splat();
        log(`test_v128_load8_splat: got ${load8SplatResult}, expected 3`);
        if (load8SplatResult !== 3) {
            throw new Error(`v128.load8_splat test failed: expected 3, got ${load8SplatResult}`);
        }
        
        // Test v128.load16_splat
        const load16SplatResult = instance.exports.test_v128_load16_splat();
        log(`test_v128_load16_splat: got ${load16SplatResult}, expected 0x0201`);
        if (load16SplatResult !== 0x0201) {
            throw new Error(`v128.load16_splat test failed: expected 0x0201, got ${load16SplatResult.toString(16)}`);
        }
        
        // Test v128.load32_splat
        const load32SplatResult = instance.exports.test_v128_load32_splat();
        log(`test_v128_load32_splat: got ${load32SplatResult.toString(16)}, expected 0x03020100`);
        if (load32SplatResult !== 0x03020100) {
            throw new Error(`v128.load32_splat test failed: expected 0x03020100, got ${load32SplatResult.toString(16)}`);
        }
        
        // Test v128.load64_splat
        const load64SplatResult = instance.exports.test_v128_load64_splat();
        const expected64 = BigInt("0x0706050403020100");
        log(`test_v128_load64_splat: got ${load64SplatResult.toString(16)}, expected ${expected64.toString(16)}`);
        if (load64SplatResult !== expected64) {
            throw new Error(`v128.load64_splat test failed: expected ${expected64.toString(16)}, got ${load64SplatResult.toString(16)}`);
        }
        
        // Test v128.load8_lane
        const load8LaneResult = instance.exports.test_v128_load8_lane();
        log(`test_v128_load8_lane: got ${load8LaneResult}, expected 5`);
        if (load8LaneResult !== 5) {
            throw new Error(`v128.load8_lane test failed: expected 5, got ${load8LaneResult}`);
        }
        
        // Test v128.store8_lane
        const store8LaneResult = instance.exports.test_v128_store8_lane();
        log(`test_v128_store8_lane: got ${store8LaneResult}, expected 0x42`);
        if (store8LaneResult !== 0x42) {
            throw new Error(`v128.store8_lane test failed: expected 0x42, got ${store8LaneResult}`);
        }
        
        // Test v128.load32_zero
        const load32ZeroResult = instance.exports.test_v128_load32_zero();
        log(`test_v128_load32_zero: got ${load32ZeroResult.toString(16)}, expected 0x03020100`);
        if (load32ZeroResult !== 0x03020100) {
            throw new Error(`v128.load32_zero test failed: expected 0x03020100, got ${load32ZeroResult.toString(16)}`);
        }
        
        // Test v128.load8x8_s
        const load8x8SResult = instance.exports.test_v128_load8x8_s();
        log(`test_v128_load8x8_s: got ${load8x8SResult}, expected 15`);
        if (load8x8SResult !== 15) {
            throw new Error(`v128.load8x8_s test failed: expected 15, got ${load8x8SResult}`);
        }
        
        log('All SIMD memory tests passed!');
        return true;
    } catch (error) {
        console.error('Error during SIMD memory test:', error);
        return false;
    }
}

export default testSIMDMemoryNew;
// Generated by ðŸ¤–
