import { readTestData, logger } from "../test-utils.mjs";

async function testImportedFunctionOrdered(debug = false) {
    const log = logger(debug);

    try {
        const { wasmBuffer } = await readTestData("imported-functions/imported-functions-ordered.wat", debug);

        // Create imports object with the required functions and globals
        const importObject = {
            // Generated by ðŸ¤–
            edg: {
                clear: (value) => {
                    log(`clear function called with value: ${value}`);
                    return value; // Simply return the value for testing purposes
                }
            }
        };

        const wasmModule = await WebAssembly.instantiate(wasmBuffer, importObject);
        const instance = wasmModule.instance;

        // Call the clearValue function with a test value
        const testValue = 42;
        const clearResult = instance.exports.clearValue(testValue);

        log(`clearValue function called with: ${testValue}`);
        log(`clearValue result: ${clearResult}`);

        // Check if the result is as expected
        if (clearResult !== testValue) {
            throw new Error(`Expected ${testValue}, but got ${clearResult}`);
        }

        log(`clearValue function executed successfully with result: ${clearResult}`);
        return true;
    } catch (e) {
        log(`Error reading test data: ${e.message}`, debug, "ERROR");
        return false;
    }
}

export default testImportedFunctionOrdered;