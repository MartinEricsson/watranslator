import { readTestData } from "../test-utils.mjs";

async function testSharedMemoryFlags(debug = false) {
    try {
        const { wasmBuffer } = await readTestData('memory-shared/memory-shared-flags.wat', debug);
        
        // Test 1: Validate shared memory by examining the binary
        // Convert wasmBuffer to regular array for easier inspection
        const binaryArray = Array.from(wasmBuffer); // Generated by 🤖
        
        // Find the memory section (ID 5)
        let memorySectionIndex = -1;
        for (let i = 0; i < binaryArray.length; i++) { // Generated by 🤖
            if (binaryArray[i] === 5) { // Memory section ID
                memorySectionIndex = i;
                break;
            }
        }
        
        if (memorySectionIndex === -1) {
            console.error("❌ Memory section not found");
            return false;
        }
        
        // The memory flags should be a few bytes after the section ID
        // For shared memory with max, flags should be 3 (bit 0 and bit 1 set)
        // We need to skip the section size field (which can be variable length)
        // and the count field (which is 1 in our case)
        const countPos = memorySectionIndex + 2; // Skip section ID and section size
        const flagsPos = countPos + 1; // Skip the count field
        const memoryFlags = binaryArray[flagsPos]; // Generated by 🤖
        const isSharedFlagSet = (memoryFlags & 2) === 2; // Check if bit 1 is set
        
        console.assert(isSharedFlagSet, `❌ Shared memory flag should be set, got flags: ${memoryFlags}`);
        if (isSharedFlagSet) {
            console.log("✅ Shared memory flag is correctly set");
        } else {
            console.error(`❌ Shared memory flag is not set. Memory flags: ${memoryFlags}`);
            return false;
        }
        
        // Test 2: Validate that the module can be instantiated and used
        const { instance } = await WebAssembly.instantiate(wasmBuffer, {});
        const result = instance.exports.add(5, 7);
        const expectedResult = 12;
        
        console.assert(result === expectedResult, `❌ add(5, 7) should return ${expectedResult}, got ${result}`);
        if (result === expectedResult) {
            console.log("✅ Function using shared memory works correctly");
        } else {
            console.error(`❌ Function call failed. Expected: ${expectedResult}, Got: ${result}`);
            return false;
        }
        
        console.log("✅ All shared memory flags tests passed!");
        return true;
    } catch (error) {
        console.error('❌ Error testing shared memory flags:', error);
        return false;
    }
}

export default testSharedMemoryFlags; // Generated by 🤖
