import { readTestData } from "../test-utils.mjs";

async function testComprehensiveSharedMemory(debug = false) {
    try {
        const { wasmBuffer } = await readTestData('memory-shared/memory-shared-comprehensive.wat', debug);
        
        // Generate a random value for testing
        const randomValue = Math.floor(Math.random() * 1000);
        const addr = 8; // Use address 8 (2 words in)
        
        const { instance } = await WebAssembly.instantiate(wasmBuffer, {});
        
        // Test 1: Test atomic operation
        //const atomicAddResult = instance.exports.atomicAdd(addr, randomValue);
        //console.log(`Atomic add result: ${atomicAddResult}`);
        
        // Test 2: Test regular store and load with shared memory
        instance.exports.regularStore(addr + 4, randomValue * 2);
        const loadResult = instance.exports.regularLoad(addr + 4);
        
        console.assert(loadResult === randomValue * 2, 
            `‚ùå regularLoad should return ${randomValue * 2}, got ${loadResult}`);
        
        if (loadResult === randomValue * 2) {
            console.log("‚úÖ Regular memory operations work correctly with shared memory");
        } else {
            console.error(`‚ùå Regular memory operations failed with shared memory`);
            return false;
        }
        
        console.log("‚úÖ All comprehensive shared memory tests passed!");
        return true;
    } catch (error) {
        console.error('‚ùå Error testing comprehensive shared memory:', error);
        return false;
    }
} // Generated by ü§ñ

export default testComprehensiveSharedMemory; // Generated by ü§ñ
