import { readTestData, logger } from '../test-utils.mjs';

// Test for all replace_lane instructions
async function simdReplaceAllLaneTest(debug = false) {
    const log = logger(debug);
    try {
        const { wasmBuffer } = await readTestData('simd-replace-lane/simd-replace-lane-all.wat');
        const { instance } = await WebAssembly.instantiate(wasmBuffer);

        const tests = [
            { name: 'i16x8.replace_lane', expected: 12345, functionName: 'i16x8_replace_lane_test' },
            { name: 'i32x4.replace_lane', expected: 42424242, functionName: 'i32x4_replace_lane_test' },
            { name: 'i64x2.replace_lane', expected: 9876543210n, functionName: 'i64x2_replace_lane_test' },
            { name: 'f32x4.replace_lane', expected: 3.14159, functionName: 'f32x4_replace_lane_test' },
            { name: 'f64x2.replace_lane', expected: 2.71828, functionName: 'f64x2_replace_lane_test' }
        ];

        for (const test of tests) {
            const { name, expected, functionName } = test;
            const result = instance.exports[functionName]();
            
            // Special handling for BigInt comparison
            const isEqual = typeof expected === 'bigint' 
                ? result === expected 
                : Math.abs(result - expected) < 0.00001; // Allow small float difference
                
            log(`Testing ${name}: expected ${expected}, got ${result}`);
            
            if (!isEqual) {
                throw new Error(`${name} failed: expected ${expected}, got ${result}`);
            }
        }
        
        log('All SIMD replace_lane tests passed!');
        return true;
    } catch (error) {
        console.error('Error during SIMD replace_lane tests:', error);
        return false;
    }
}

export default simdReplaceAllLaneTest;
// Generated by ðŸ¤–
