// Generated by ü§ñ
import { readTestData } from '../test-utils.mjs';

async function testF64PromoteF32(debug = false) {
  try {
    const { wasmBuffer } = await readTestData('f64-promote-f32/f64-promote-f32.wat', debug);
    
    // Instantiate WebAssembly module
    if (typeof WebAssembly !== 'undefined') {
      if(debug) console.log('Testing WebAssembly instantiation...');
      
      const wasmModule = new WebAssembly.Module(wasmBuffer);
      const instance = new WebAssembly.Instance(wasmModule);
      
      if(debug) console.log('Exported functions:', Object.keys(instance.exports));
      
      // Test f64.promote_f32
      if (typeof instance.exports.promote === 'function') {
        console.log('\nTesting f64.promote_f32:');
        const testCases = [
          { value: 1.5, expected: 1.5 },
          { value: 0.0, expected: 0.0 },
          { value: -0.0, expected: -0.0 },
          { value: 3.4028234663852886e+38, expected: 3.4028234663852886e+38 }, // Max f32
          { value: 1.401298464324817e-45, expected: 1.401298464324817e-45 }, // Min positive f32
          { value: Infinity, expected: Infinity },
          { value: -Infinity, expected: -Infinity },
          { value: NaN, expected: NaN }
        ];
        
        let testsPassed = true;
        for (const test of testCases) {
          const result = instance.exports.promote(test.value);
          
          let passed;
          if (Number.isNaN(test.expected)) {
            passed = Number.isNaN(result);
            console.log(`promote(${test.value}) = ${result}, expected: NaN - ${passed ? '‚úÖ' : '‚ùå'}`);
          } else if (Object.is(test.expected, -0.0)) {
            passed = Object.is(result, -0.0);
            console.log(`promote(${test.value}) = ${result} (negative zero?: ${passed}), expected: -0.0 - ${passed ? '‚úÖ' : '‚ùå'}`);
          } else {
            passed = result === test.expected;
            console.log(`promote(${test.value}) = ${result}, expected: ${test.expected} - ${passed ? '‚úÖ' : '‚ùå'}`);
          }
          
          if (!passed) testsPassed = false;
        }
        
        if (testsPassed) {
          console.log('‚úÖ f64.promote_f32 test: works correctly!');
        } else {
          console.error('‚ùå f64.promote_f32 test failed: function returned incorrect results');
          return false;
        }
      } else {
        console.error('‚ùå f64.promote_f32 test failed: function not found in exports');
        return false;
      }
      
      console.log('\n‚úÖ All f64.promote_f32 tests passed!');
      return true;
    }
  } catch (error) {
    console.error('Error during f64.promote_f32 test:', error);
    return false;
  }
}

export default testF64PromoteF32;