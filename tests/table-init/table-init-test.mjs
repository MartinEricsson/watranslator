// Generated by ü§ñ
import assert from 'assert';
import { readTestData } from '../test-utils.mjs';

async function testTableInit(debug = false) {
  try {
    const { wasmBuffer, ast } = await readTestData('table-init/table-init.wat', debug);

    // Verify AST structure
    assert(ast[0].tables && ast[0].tables.length > 0, 'Table should be present in AST');
    assert.strictEqual(ast[0].tables[0].min, 4, 'Table min size should be 4');
    
    // Verify element segments
    assert(ast[0].elements && ast[0].elements.length === 1, 'Should have one element segment');
    
    // Instantiate and test
    const { instance } = await WebAssembly.instantiate(wasmBuffer);
    
    // Test table contents
    const table = instance.exports.tbl;
    console.log(table);
    assert(table instanceof WebAssembly.Table, 'Table should be exported');
    assert.strictEqual(table.length, 4, 'Table should have length 4');
    
    // Initialize table using table.init
    instance.exports.init_table(1, 0, 3); // Copy 3 elements starting at element 0 to table index 1
    
    // Get functions and verify they were copied correctly
    const getFunc = instance.exports.get_func;
    
    // Table should now have:
    // Index 1: f1 (42)
    // Index 2: f2 (43)
    // Index 3: f3 (44)
    const func1 = getFunc(1);
    const func2 = getFunc(2);
    const func3 = getFunc(3);
    
    assert.strictEqual(func1(), 42, 'Function at index 1 should return 42');
    assert.strictEqual(func2(), 43, 'Function at index 2 should return 43');
    assert.strictEqual(func3(), 44, 'Function at index 3 should return 44');
    
    if (debug) console.log('‚úÖ Table initialization test passed');
    return true;
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    return false;
  }
}

export default testTableInit;