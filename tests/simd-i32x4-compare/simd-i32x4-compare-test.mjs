import { readTestData, logger } from '../test-utils.mjs';

async function testSIMDi32x4Compare(debug = false) {
    const log = logger(debug);
    try {
        const { wasmBuffer } = await readTestData('simd-i32x4-compare/simd-i32x4-compare.wat', debug);
        log('SIMD i32x4 comparison test WAT file loaded successfully');
        
        const { instance } = await WebAssembly.instantiate(wasmBuffer);
        log('SIMD i32x4 comparison test WASM module instantiated successfully');
        
        // Test i32x4.eq
        const eqResult = instance.exports.test_i32x4_eq();
        log(`test_i32x4_eq: got ${eqResult}, expected -2`);
        if (eqResult !== -2) {
            throw new Error(`i32x4.eq test failed: expected -2, got ${eqResult}`);
        }
        
        // Test i32x4.ne
        const neResult = instance.exports.test_i32x4_ne();
        log(`test_i32x4_ne: got ${neResult}, expected -2`);
        if (neResult !== -2) {
            throw new Error(`i32x4.ne test failed: expected -2, got ${neResult}`);
        }
        
        // Test i32x4.lt_s
        const ltSResult = instance.exports.test_i32x4_lt_s();
        log(`test_i32x4_lt_s: got ${ltSResult}, expected -3`);
        if (ltSResult !== -3) {
            throw new Error(`i32x4.lt_s test failed: expected -3, got ${ltSResult}`);
        }
        
        // Test i32x4.lt_u
        const ltUResult = instance.exports.test_i32x4_lt_u();
        log(`test_i32x4_lt_u: got ${ltUResult}, expected -2`);
        if (ltUResult !== -2) {
            throw new Error(`i32x4.lt_u test failed: expected -2, got ${ltUResult}`);
        }
        
        // Test i32x4.gt_s
        const gtSResult = instance.exports.test_i32x4_gt_s();
        log(`test_i32x4_gt_s: got ${gtSResult}, expected -3`);
        if (gtSResult !== -3) {
            throw new Error(`i32x4.gt_s test failed: expected -3, got ${gtSResult}`);
        }
        
        // Test i32x4.gt_u
        const gtUResult = instance.exports.test_i32x4_gt_u();
        log(`test_i32x4_gt_u: got ${gtUResult}, expected -3`);
        if (gtUResult !== -3) {
            throw new Error(`i32x4.gt_u test failed: expected -3, got ${gtUResult}`);
        }
        
        // Test i32x4.le_s
        const leSResult = instance.exports.test_i32x4_le_s();
        log(`test_i32x4_le_s: got ${leSResult}, expected -3`);
        if (leSResult !== -3) {
            throw new Error(`i32x4.le_s test failed: expected -3, got ${leSResult}`);
        }
        
        // Test i32x4.le_u
        const leUResult = instance.exports.test_i32x4_le_u();
        log(`test_i32x4_le_u: got ${leUResult}, expected -3`);
        if (leUResult !== -3) {
            throw new Error(`i32x4.le_u test failed: expected -3, got ${leUResult}`);
        }
        
        // Test i32x4.ge_s
        const geSResult = instance.exports.test_i32x4_ge_s();
        log(`test_i32x4_ge_s: got ${geSResult}, expected -3`);
        if (geSResult !== -3) {
            throw new Error(`i32x4.ge_s test failed: expected -3, got ${geSResult}`);
        }
        
        // Test i32x4.ge_u
        const geUResult = instance.exports.test_i32x4_ge_u();
        log(`test_i32x4_ge_u: got ${geUResult}, expected -3`);
        if (geUResult !== -3) {
            throw new Error(`i32x4.ge_u test failed: expected -3, got ${geUResult}`);
        }
        
        return { success: true };
    } catch (error) {
        log(`Error: ${error.message}`);
        return { success: false, error };
    }
} // Generated by ðŸ¤–

export default testSIMDi32x4Compare;
