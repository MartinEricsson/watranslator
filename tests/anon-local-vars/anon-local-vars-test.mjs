import { readTestData, logger } from '../test-utils.mjs';

async function testAnonymousLocalVars(debug = false) {
    const log = logger(debug);
    try {
        const { wasmBuffer, ast } = await readTestData('anon-local-vars/anon-local-vars.wat', debug);

        log('AST created:');
        // Use custom replacer to handle BigInt serialization
        log(JSON.stringify(ast, (key, value) =>
            typeof value === 'bigint' ? value.toString() + 'n' : value, 2)); // Generated by ü§ñ

        // Try to instantiate WebAssembly module
        log('Testing WebAssembly instantiation...');

        const wasmModule = new WebAssembly.Module(wasmBuffer);
        const instance = new WebAssembly.Instance(wasmModule);

        log('Exported functions:', Object.keys(instance.exports));

        // Test mixed named and anonymous locals function
        if (typeof instance.exports.mixed_locals === 'function') {
            const result = instance.exports.mixed_locals();
            log(`Result of mixed_locals(): ${result}`);
            console.assert(result === 142, `‚ùå Expected 142, got ${result}`);
        } else {
            log('‚ùå mixed_locals function not found in exports');
        }

        // Test all anonymous locals function
        if (typeof instance.exports.all_anon === 'function') {
            const result = instance.exports.all_anon();
            log(`Result of all_anon(): ${result}`);
            console.assert(result === 60, `‚ùå Expected 60, got ${result}`);
        } else {
            log('‚ùå all_anon function not found in exports');
        }

        // Test SIMD anonymous local function
        if (typeof instance.exports.simd_anon === 'function') {
            const result = instance.exports.simd_anon();
            log(`Result of simd_anon(): ${result}`);
            console.assert(result === 14, `‚ùå Expected 14, got ${result}`);
        } else {
            log('‚ùå simd_anon function not found in exports');
        }

        return true;
    } catch (err) {
        log('‚ùå Error testing anonymous local variables:', err);
        return false;
    }
} // Generated by ü§ñ

export default testAnonymousLocalVars;
