import { readTestData } from '../test-utils.mjs';

// Test for i16x8.extract_lane_s and i16x8.extract_lane_u instructions
async function simdExtractLaneI16x8Test(debug = false) {
    try {
        const { wasmBuffer } = await readTestData('simd-extract-lane-i16x8/simd-extract-lane-i16x8.wat');
        const { instance } = await WebAssembly.instantiate(wasmBuffer);

        // Test extract signed positive value
        const positiveResult = instance.exports.i16x8_extract_lane_s_positive();
        console.assert(positiveResult === 32767, `i16x8_extract_lane_s_positive returned ${positiveResult}, expected 32767`);

        // Test extract signed negative value
        const negativeResult = instance.exports.i16x8_extract_lane_s_negative();
        console.assert(negativeResult === -32768, `i16x8_extract_lane_s_negative returned ${negativeResult}, expected -32768`);

        // Test extract unsigned value
        const unsignedResult = instance.exports.i16x8_extract_lane_u();
        console.assert(unsignedResult === 65535, `i16x8_extract_lane_u returned ${unsignedResult}, expected 65535`);

        // Test the signed vs unsigned difference
        const diffResult = instance.exports.i16x8_extract_lane_s_vs_u();
        console.assert(diffResult === -1, `i16x8_extract_lane_s_vs_u returned ${diffResult}, expected -1`);

        if (debug) {
            console.log('All SIMD i16x8.extract_lane_s/u tests passed!');
        }
        return true;
    } catch (error) {
        console.error('Error during SIMD i16x8.extract_lane_s/u test:', error);
        return false;
    }
}

export default simdExtractLaneI16x8Test;
// Generated by ðŸ¤–
