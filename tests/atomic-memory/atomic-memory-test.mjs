// Generated by ü§ñ
import { readTestData } from '../test-utils.mjs';

async function testAtomicMemory(debug = false) {
    try {
        const { wasmBuffer } = await readTestData('atomic-memory/atomic-memory.wat', debug);

        // Instantiate the WebAssembly module
        const { instance } = await WebAssembly.instantiate(wasmBuffer);

        // Test atomic store and load
        const testCases = [
            { address: 0, value: 42 },
            { address: 4, value: 0xFFFFFFFF },
            { address: 8, value: -1 },
            { address: 12, value: 0x12345678 }
        ];

        let allPassed = true;
        for (const test of testCases) {
            const result = instance.exports.atomic_store_load(test.address, test.value);
            
            // Convert both values to 32-bit signed integers for accurate comparison
            const expectedValue = test.value | 0; // Force to 32-bit signed int
            const actualValue = result | 0; // Force to 32-bit signed int
            
            const passed = actualValue === expectedValue;
            if (debug || !passed) {
                console.log(`atomic_store_load(${test.address}, 0x${test.value.toString(16)}) = 0x${result.toString(16)} - ${passed ? '‚úÖ' : '‚ùå'}`);
            }
            allPassed = allPassed && passed;
        }

        // Test i64 atomic store and load
        const i64TestCases = [
            { address: 16, value: 42n },
            { address: 24, value: 0xFFFFFFFFFFFFFFFFn },
            { address: 32, value: -1n },
            { address: 40, value: 0x1234567890ABCDEFn }
        ];

        for (const test of i64TestCases) {
            const result = instance.exports.atomic_i64_store_load(test.address, test.value);
            
            // Special case: max unsigned 64-bit integer (all bits set to 1) is interpreted as -1n in JavaScript
            let passed = false;
            if (test.value === 0xFFFFFFFFFFFFFFFFn && result === -1n) {
                passed = true;
            } else {
                passed = result === test.value;
            }
            
            if (debug || !passed) {
                console.log(`atomic_i64_store_load(${test.address}, ${test.value}n) = ${result}n - ${passed ? '‚úÖ' : '‚ùå'}`);
            }
            allPassed = allPassed && passed;
        }
        
        // Test i32.atomic.load8_u
        const atomic8UTestCases = [
            { address: 48, value: 0 },
            { address: 49, value: 42 },
            { address: 50, value: 255 },
            { address: 51, value: 0xAB }
        ];
        
        for (const test of atomic8UTestCases) {
            // For i32.atomic.load8_u, we only expect the lowest 8 bits
            const result = instance.exports.atomic_load8_u(test.address, test.value);
            const expectedValue = test.value & 0xFF;
            
            const passed = result === expectedValue;
            if (debug || !passed) {
                console.log(`atomic_load8_u(${test.address}, 0x${test.value.toString(16)}) = 0x${result.toString(16)} - ${passed ? '‚úÖ' : '‚ùå'}`);
            }
            allPassed = allPassed && passed;
        }
        
        // Test i32.atomic.store8
        // Generated by ü§ñ
        const atomicStore8TestCases = [
            { address: 52, value: 0 },
            { address: 53, value: 42 },
            { address: 54, value: 255 },
            { address: 55, value: 0xABAB } // Will be truncated to 0xAB (lowest byte)
        ];
        
        for (const test of atomicStore8TestCases) {
            // For i32.atomic.store8, we only store the lowest 8 bits
            const result = instance.exports.atomic_store8_load8_u(test.address, test.value);
            const expectedValue = test.value & 0xFF;
            
            const passed = result === expectedValue;
            if (debug || !passed) {
                console.log(`atomic_store8_load8_u(${test.address}, 0x${test.value.toString(16)}) = 0x${result.toString(16)} - ${passed ? '‚úÖ' : '‚ùå'}`);
            }
            allPassed = allPassed && passed;
        }
        
        // Test i32.atomic.store16
        // Generated by ü§ñ
        const atomicStore16TestCases = [
            { address: 56, value: 0 },
            { address: 58, value: 42 },
            { address: 60, value: 0xFFFF },
            { address: 62, value: 0xABCDEF } // Will be truncated to 0xCDEF (lowest 16 bits)
        ];
        
        for (const test of atomicStore16TestCases) {
            // For i32.atomic.store16, we only store the lowest 16 bits
            const result = instance.exports.atomic_store16_load16_u(test.address, test.value);
            const expectedValue = test.value & 0xFFFF;
            
            const passed = result === expectedValue;
            if (debug || !passed) {
                console.log(`atomic_store16_load16_u(${test.address}, 0x${test.value.toString(16)}) = 0x${result.toString(16)} - ${passed ? '‚úÖ' : '‚ùå'}`);
            }
            allPassed = allPassed && passed;
        }
        
        // Test i64.atomic.store8
        // Generated by ü§ñ
        const atomicI64Store8TestCases = [
            { address: 64, value: 0n },
            { address: 65, value: 42n },
            { address: 66, value: 255n },
            { address: 67, value: 0xABCDn } // Will be truncated to 0xCD (lowest byte)
        ];
        
        for (const test of atomicI64Store8TestCases) {
            // For i64.atomic.store8, we only store the lowest 8 bits
            const result = instance.exports.atomic_i64_store8_load8_u(test.address, test.value);
            const expectedValue = test.value & 0xFFn;
            
            const passed = result === expectedValue;
            if (debug || !passed) {
                console.log(`atomic_i64_store8_load8_u(${test.address}, ${test.value}n) = ${result}n - ${passed ? '‚úÖ' : '‚ùå'}`);
            }
            allPassed = allPassed && passed;
        }
        
        // Test i64.atomic.store16
        // Generated by ü§ñ
        const atomicI64Store16TestCases = [
            { address: 68, value: 0n },
            { address: 70, value: 42n },
            { address: 72, value: 0xFFFFn },
            { address: 74, value: 0xABCDEFn } // Will be truncated to 0xCDEF (lowest 16 bits)
        ];
        
        for (const test of atomicI64Store16TestCases) {
            // For i64.atomic.store16, we only store the lowest 16 bits
            const result = instance.exports.atomic_i64_store16_load16_u(test.address, test.value);
            const expectedValue = test.value & 0xFFFFn;
            
            const passed = result === expectedValue;
            if (debug || !passed) {
                console.log(`atomic_i64_store16_load16_u(${test.address}, ${test.value}n) = ${result}n - ${passed ? '‚úÖ' : '‚ùå'}`);
            }
            allPassed = allPassed && passed;
        }
        
        // Test i64.atomic.store32
        // Generated by ü§ñ
        const atomicI64Store32TestCases = [
            { address: 76, value: 0n },
            { address: 80, value: 42n },
            { address: 84, value: 0xFFFFFFFFn },
            { address: 88, value: 0x1234567890ABCDEFn } // Will be truncated to 0x90ABCDEF (lowest 32 bits)
        ];
        
        for (const test of atomicI64Store32TestCases) {
            // For i64.atomic.store32, we only store the lowest 32 bits
            const result = instance.exports.atomic_i64_store32_load32_u(test.address, test.value);
            const expectedValue = test.value & 0xFFFFFFFFn;
            
            const passed = result === expectedValue;
            if (debug || !passed) {
                console.log(`atomic_i64_store32_load32_u(${test.address}, ${test.value}n) = ${result}n - ${passed ? '‚úÖ' : '‚ùå'}`);
            }
            allPassed = allPassed && passed;
        }

        if (allPassed) {
            console.log('‚úÖ All atomic memory tests passed!');
            return true;
        } else {
            console.error('‚ùå Some atomic memory tests failed!');
            return false;
        }
    } catch (error) {
        console.error('Error during atomic memory test:', error);
        return false;
    }
}

export default testAtomicMemory;