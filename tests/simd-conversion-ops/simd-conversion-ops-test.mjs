// filepath: /Users/martinericsson/dev/fes-compiler/tests/simd-conversion-ops/simd-conversion-ops-test.mjs
// Generated by ü§ñ
import { readTestData, logger } from '../test-utils.mjs';

async function testSIMDConversionOps(debug = false) {
  const log = logger(debug);
  try {
    const { wasmBuffer } = await readTestData('simd-conversion-ops/simd-conversion-ops.wat', debug);
    log('SIMD conversion operations test WAT file loaded successfully');
    
    const { instance } = await WebAssembly.instantiate(wasmBuffer);
    log('SIMD conversion operations test WASM module instantiated successfully');
    
    // Test i32x4.trunc_sat_f32x4_s
    const truncSatF32x4SResult = instance.exports.i32x4_trunc_sat_f32x4_s_test();
    log(`i32x4_trunc_sat_f32x4_s_test: ${truncSatF32x4SResult}`);
    if (truncSatF32x4SResult !== 1) {
      throw new Error(`‚ùå i32x4.trunc_sat_f32x4_s test failed: expected 1, got ${truncSatF32x4SResult}`);
    }
    
    // Test i32x4.trunc_sat_f32x4_u
    const truncSatF32x4UResult = instance.exports.i32x4_trunc_sat_f32x4_u_test();
    log(`i32x4_trunc_sat_f32x4_u_test: ${truncSatF32x4UResult}`);
    if (truncSatF32x4UResult !== 2) {
      throw new Error(`‚ùå i32x4.trunc_sat_f32x4_u test failed: expected 2, got ${truncSatF32x4UResult}`);
    }
    
    // Test f32x4.convert_i32x4_s
    const convertI32x4SResult = instance.exports.f32x4_convert_i32x4_s_test();
    log(`f32x4_convert_i32x4_s_test: ${convertI32x4SResult}`);
    if (convertI32x4SResult !== 42) {
      throw new Error(`‚ùå f32x4.convert_i32x4_s test failed: expected 42, got ${convertI32x4SResult}`);
    }
    
    // Test f32x4.convert_i32x4_u
    const convertI32x4UResult = instance.exports.f32x4_convert_i32x4_u_test();
    log(`f32x4_convert_i32x4_u_test: ${convertI32x4UResult}`);
    if (convertI32x4UResult !== 42) {
      throw new Error(`‚ùå f32x4.convert_i32x4_u test failed: expected 42, got ${convertI32x4UResult}`);
    }
    
    // Test i32x4.trunc_sat_f64x2_s_zero
    const truncSatF64x2SZeroResult = instance.exports.i32x4_trunc_sat_f64x2_s_zero_test();
    log(`i32x4_trunc_sat_f64x2_s_zero_test: ${truncSatF64x2SZeroResult}`);
    if (truncSatF64x2SZeroResult !== 123) {
      throw new Error(`‚ùå i32x4.trunc_sat_f64x2_s_zero test failed: expected 123, got ${truncSatF64x2SZeroResult}`);
    }
    
    // Test i32x4.trunc_sat_f64x2_u_zero
    const truncSatF64x2UZeroResult = instance.exports.i32x4_trunc_sat_f64x2_u_zero_test();
    log(`i32x4_trunc_sat_f64x2_u_zero_test: ${truncSatF64x2UZeroResult}`);
    if (truncSatF64x2UZeroResult !== 234) {
      throw new Error(`‚ùå i32x4.trunc_sat_f64x2_u_zero test failed: expected 234, got ${truncSatF64x2UZeroResult}`);
    }
    
    // Test f64x2.convert_low_i32x4_s
    const convertLowI32x4SResult = instance.exports.f64x2_convert_low_i32x4_s_test();
    log(`f64x2_convert_low_i32x4_s_test: ${convertLowI32x4SResult}`);
    if (convertLowI32x4SResult !== -42) {
      throw new Error(`‚ùå f64x2.convert_low_i32x4_s test failed: expected -42, got ${convertLowI32x4SResult}`);
    }
    
    // Test f64x2.convert_low_i32x4_u
    const convertLowI32x4UResult = instance.exports.f64x2_convert_low_i32x4_u_test();
    log(`f64x2_convert_low_i32x4_u_test: ${convertLowI32x4UResult}`);
    if (convertLowI32x4UResult !== 42) {
      throw new Error(`‚ùå f64x2.convert_low_i32x4_u test failed: expected 42, got ${convertLowI32x4UResult}`);
    }
    
    // Test f32x4.demote_f64x2_zero
    const demoteF64x2ZeroResult = instance.exports.f32x4_demote_f64x2_zero_test();
    log(`f32x4_demote_f64x2_zero_test: ${demoteF64x2ZeroResult}`);
    // Using approximate comparison for floating point
    if (Math.abs(demoteF64x2ZeroResult - 12345.68) > 0.1) {
      throw new Error(`‚ùå f32x4.demote_f64x2_zero test failed: expected approximately 12345.68, got ${demoteF64x2ZeroResult}`);
    }
    
    // Test f64x2.promote_low_f32x4
    const promoteLowF32x4Result = instance.exports.f64x2_promote_low_f32x4_test();
    log(`f64x2_promote_low_f32x4_test: ${promoteLowF32x4Result}`);
    if (promoteLowF32x4Result !== 42.5) {
      throw new Error(`‚ùå f64x2.promote_low_f32x4 test failed: expected 42.5, got ${promoteLowF32x4Result}`);
    }
    
    log('All SIMD conversion operations tests passed successfully!');
    return true;
  } catch (error) {
    log(`‚ùå Error: ${error.message}`);
    throw error;
  }
}

export default testSIMDConversionOps;
