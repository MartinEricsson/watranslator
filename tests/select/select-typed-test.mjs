import { readTestData } from "../test-utils.mjs";

// Generated by ü§ñ
async function testTypedSelect(debug = false) {
    try {
        const { wasmBuffer } = await readTestData('select/select-typed.wat', debug);
        const { instance } = await WebAssembly.instantiate(wasmBuffer, {});
        
        const i32Tests = [
            { name: "select_i32_1", expected: 1, func: "select_i32", params: [1, 1, 0] },
            { name: "select_i32_2", expected: 0, func: "select_i32", params: [0, 1, 0] },
        ];
        
        const f32Tests = [
            { name: "select_f32_1", expected: 1.5, func: "select_f32", params: [1, 1.5, 3.5] },
            { name: "select_f32_2", expected: 3.5, func: "select_f32", params: [0, 1.5, 3.5] },
        ];
        
        const allTests = [...i32Tests, ...f32Tests];
        let results = [];
        
        for (const { name, expected, func, params } of allTests) {
            const result = instance.exports[func](...params);
            const resultRes = Math.abs(result - expected) < 0.0001; // Allow small float differences
            console.assert(resultRes, `‚ùå ${name} should return ${expected}, got ${result}`);
            results.push(resultRes);
            
            if (debug) {
                console.log(`Debug: ${name} - Expected: ${expected}, Got: ${result}`);
            }
            
            if (resultRes) {
                console.log(`‚úÖ ${name} test passed!`);
            } else {
                console.error(`‚ùå ${name} test failed.`);
            }
        }
        
        // Check if all tests passed
        const allTestsPassed = results.every(result => result);
        if (allTestsPassed) {
            console.log("‚úÖ All typed select tests passed!");
            return true;
        } else {
            console.error("‚ùå Some typed select tests failed.");
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error testing typed select:', error);
        return false;
    }
}

export default testTypedSelect;