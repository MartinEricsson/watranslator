import { readTestData } from "../test-utils.mjs";

// Generated by ü§ñ
async function testTypeConversionF64(debug = false) {
  try {
    const { wasmBuffer } = await readTestData('type-conversion-f64/type-conversion-f64.wat', debug);

    // Instantiate the WebAssembly module
    const { instance } = await WebAssembly.instantiate(wasmBuffer, {});

    const tests = [
      // Signed conversion tests
      { name: 'convert_i32_s_to_f64', expected: 42.0, func: 'convert_i32_s_to_f64', params: [42] },
      { name: 'convert_i32_s_to_f64', expected: -42.0, func: 'convert_i32_s_to_f64', params: [-42] },
      { name: 'convert_i32_s_to_f64', expected: 0.0, func: 'convert_i32_s_to_f64', params: [0] },
      { name: 'convert_i32_s_to_f64', expected: 2147483647.0, func: 'convert_i32_s_to_f64', params: [2147483647] }, // Max i32
      { name: 'convert_i32_s_to_f64', expected: -2147483648.0, func: 'convert_i32_s_to_f64', params: [-2147483648] }, // Min i32
      
      // Unsigned conversion tests
      { name: 'convert_i32_u_to_f64', expected: 42.0, func: 'convert_i32_u_to_f64', params: [42] },
      { name: 'convert_i32_u_to_f64', expected: 0.0, func: 'convert_i32_u_to_f64', params: [0] },
      { name: 'convert_i32_u_to_f64', expected: 2147483647.0, func: 'convert_i32_u_to_f64', params: [2147483647] }, // Max i32
      { name: 'convert_i32_u_to_f64', expected: 4294967295.0, func: 'convert_i32_u_to_f64', params: [-1] }, // Unsigned interpretation of -1
      { name: 'convert_i32_u_to_f64', expected: 3000000000.0, func: 'convert_i32_u_to_f64', params: [3000000000] }, // Value > 2^31
      
      // Direct tests
      { name: 'test_positive', expected: 42.0, func: 'test_positive', params: [] },
      { name: 'test_negative', expected: -42.0, func: 'test_negative', params: [] },
      { name: 'test_zero', expected: 0.0, func: 'test_zero', params: [] },
      { name: 'test_max_i32', expected: 2147483647.0, func: 'test_max_i32', params: [] },
      { name: 'test_min_i32', expected: -2147483648.0, func: 'test_min_i32', params: [] },
      { name: 'test_unsigned_large', expected: 4294967295.0, func: 'test_unsigned_large', params: [] }, // 2^32-1
      { name: 'test_unsigned_medium', expected: 2147483647.0, func: 'test_unsigned_medium', params: [] } // 2^31-1
    ];

    let results = [];

    for (const { name, expected, func, params } of tests) {
      const result = instance.exports[func](...params);
      
      // For float comparisons, exact equality is ok for integer conversions
      const resultRes = Math.abs(result - expected) < 0.00001;
      
      results.push(resultRes);
      
      if (debug || !resultRes) {
        console.log(`${name} with params [${params}]: result=${result}, expected=${expected}, ${resultRes ? '‚úÖ' : '‚ùå'}`);
      }
    }

    const allTestsPassed = results.every(result => result);
    if (allTestsPassed) {
      console.log("‚úÖ All f64.convert_i32_(s/u) tests passed!");
      return true;
    } else {
      console.error("‚ùå Some f64.convert_i32_(s/u) tests failed.");
      return false;
    }
  } catch (error) {
    console.error('Error during f64 type conversion test:', error);
    return false;
  }
}

export { testTypeConversionF64 };