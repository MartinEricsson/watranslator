import { fileURLToPath } from 'url';
import path from 'path';
import { readWATFile } from '../src/test-utils/file-utils.mjs';
import { compileToWASM } from '../src/compile/compile.mjs';
import { parseWAT } from '../src/parser/parser.mjs';

// Generated by 🤖
// Custom replacer for JSON.stringify that handles BigInt values
const bigIntReplacer = (key, value) => {
    // Convert BigInt to string representation for serialization
    if (typeof value === 'bigint') {
        return value.toString() + 'n';
    }
    return value;
};

const logger = (debug = false) => {
    if (debug) {
        return (msg, level = "INFO") => {
            if (level !== "INFO") {
                console.error(msg);
            } else {
                console.log(msg);
            }
        }
    } else {
        return _ => _;
    }
}

const readTestData = async (filename, debug = false) => {
    const log = logger(debug);
    // Get directory name for current file
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);

    // Path to WAT file
    const watFilePath = path.join(__dirname, filename);

    // Read the WAT file
    try {
        const watContent = await readWATFile(watFilePath);

        if (debug) console.log('Parsing WAT code...');
        const ast = parseWAT(watContent);

        if (debug) console.log('AST created:');
        if (debug) console.log(JSON.stringify(ast, bigIntReplacer, 2));

        if (debug) console.log('Compiling to WASM...');
        const wasmBinary = compileToWASM(ast);

        if (debug) console.log(`WASM binary created: ${wasmBinary.length} bytes`);

        const wasmBuffer = new Uint8Array(wasmBinary);

        return { wasmBuffer, ast };
    } catch (e) {
        log({ message: (`❌ Error reading WAT file: ${e.message}`), debug, level: "ERROR" });
        throw e;
    }
}

const testRunner = async (testFunction, label = "test", debug = false) => {
    try {
        const result = await testFunction(debug);
        if (result) {
            console.log(`🆗 ${label} tests passed!`);
        } else {
            console.error(`❌ ${label} tests failed.`);
        }
        return result;
    } catch (error) {
        console.error(`❌ Error testing ${label}:`, error);
        return false;
    }
}

const dumpWASM = (wasmBuffer) => {
    const hexString = Array.from(wasmBuffer)
        .map(byte => byte.toString(16).padStart(2, '0'))
        .join(' ');
    console.log(`WASM Binary: ${hexString}`);
}

export { readTestData, testRunner, logger, dumpWASM }