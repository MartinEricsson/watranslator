import { readTestData, logger, dumpWASM } from '../test-utils.mjs';

// Generated by ðŸ¤–
async function testSIMDi16x8Ops(debug = false) {
  const log = logger(debug);
  try {
    const { wasmBuffer } = await readTestData('simd-i16x8-ops/simd-i16x8-ops.wat', debug);
    log('SIMD i16x8 operations test WAT file loaded successfully');

    /*if(debug) {
        dumpWASM(wasmBuffer);
    }*/
    
    const { instance } = await WebAssembly.instantiate(wasmBuffer);
    log('SIMD i16x8 operations test WASM module instantiated successfully');
    
    // Test i16x8.abs
    const absResult = instance.exports.i16x8_abs_test();
    log(`i16x8_abs_test: got ${absResult}, expected > 0`);
    if (absResult <= 0) {
      throw new Error(`i16x8.abs test failed: expected positive value, got ${absResult}`);
    }
    
    // Test i16x8.neg
    const negResult = instance.exports.i16x8_neg_test();
    log(`i16x8_neg_test: got ${negResult}, expected < 0`);
    if (negResult >= 0) {
      throw new Error(`i16x8.neg test failed: expected negative value, got ${negResult}`);
    }
    
    // Test i16x8.q15mulr_sat_s
    const q15mulrSatSResult = instance.exports.i16x8_q15mulr_sat_s_test();
    log(`i16x8_q15mulr_sat_s_test: ${q15mulrSatSResult}`);
    
    // Test i16x8.all_true
    const allTrueResult = instance.exports.i16x8_all_true_test();
    log(`i16x8_all_true_test: got ${allTrueResult}, expected 1`);
    if (allTrueResult !== 1) {
      throw new Error(`i16x8.all_true test failed: expected 1, got ${allTrueResult}`);
    }
    
    // Test i16x8.bitmask
    const bitmaskResult = instance.exports.i16x8_bitmask_test();
    log(`i16x8_bitmask_test: ${bitmaskResult}`);
    
    // Test i16x8 operations: narrow, extend, shifts
    testNumericResult(instance, 'i16x8_narrow_i32x4_s_test', log);
    testNumericResult(instance, 'i16x8_narrow_i32x4_u_test', log);
    testNumericResult(instance, 'i16x8_extend_low_i8x16_s_test', log);
    testNumericResult(instance, 'i16x8_extend_high_i8x16_s_test', log);
    testNumericResult(instance, 'i16x8_extend_low_i8x16_u_test', log);
    testNumericResult(instance, 'i16x8_extend_high_i8x16_u_test', log);
    testNumericResult(instance, 'i16x8_shl_test', log);
    testNumericResult(instance, 'i16x8_shr_s_test', log);
    testNumericResult(instance, 'i16x8_shr_u_test', log);
    
    // Test i16x8 operations: arithmetic
    testNumericResult(instance, 'i16x8_add_test', log);
    testNumericResult(instance, 'i16x8_add_sat_s_test', log);
    testNumericResult(instance, 'i16x8_add_sat_u_test', log);
    testNumericResult(instance, 'i16x8_sub_test', log);
    testNumericResult(instance, 'i16x8_sub_sat_s_test', log);
    testNumericResult(instance, 'i16x8_sub_sat_u_test', log);
    testNumericResult(instance, 'i16x8_mul_test', log);
    
    // Test i16x8 operations: min/max
    testNumericResult(instance, 'i16x8_min_s_test', log);
    testNumericResult(instance, 'i16x8_min_u_test', log);
    testNumericResult(instance, 'i16x8_max_s_test', log);
    testNumericResult(instance, 'i16x8_max_u_test', log);
    testNumericResult(instance, 'i16x8_avgr_u_test', log);
    
    // Test i16x8 operations: extended mul and add
    testNumericResult(instance, 'i16x8_extmul_low_i8x16_s_test', log);
    testNumericResult(instance, 'i16x8_extmul_high_i8x16_s_test', log);
    testNumericResult(instance, 'i16x8_extmul_low_i8x16_u_test', log);
    testNumericResult(instance, 'i16x8_extmul_high_i8x16_u_test', log);
    testNumericResult(instance, 'i16x8_extadd_pairwise_i8x16_s_test', log);
    testNumericResult(instance, 'i16x8_extadd_pairwise_i8x16_u_test', log);
    
    log('All SIMD i16x8 operations tests passed!');
    return true;
  } catch (error) {
    log(`Error in testSIMDi16x8Ops: ${error.message}`);
    return false;
  }
}

function testNumericResult(instance, testName, log) {
  const result = instance.exports[testName]();
  log(`${testName}: ${result}`);
  if (typeof result !== 'number') {
    throw new Error(`${testName} failed: expected a number, got ${typeof result}`);
  }
}

export default testSIMDi16x8Ops;
