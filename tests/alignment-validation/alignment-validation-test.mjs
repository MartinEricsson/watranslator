// Generated by ü§ñ
import { compile } from '../../src/index.mjs';

const ALIGNMENT_TESTS = [
  {
    name: 'valid_i32_load_align_2',
    content: `(module
  (memory 1)
  (func $test (param $addr i32) (result i32)
    local.get $addr
    i32.load align=2
  )
)`,
    shouldPass: true
  },
  {
    name: 'valid_i64_load_align_3',
    content: `(module
  (memory 1)
  (func $test (param $addr i32) (result i64)
    local.get $addr
    i64.load align=3
  )
)`,
    shouldPass: true
  },
  {
    name: 'exceed_natural_alignment_i32',
    content: `(module
  (memory 1)
  (func $test (param $addr i32) (result i32)
    local.get $addr
    i32.load align=3
  )
)`,
    shouldPass: false,
    expectedError: 'Invalid alignment value: 3. Cannot exceed natural alignment of 2'
  },
  {
    name: 'exceed_natural_alignment_i64',
    content: `(module
  (memory 1)
  (func $test (param $addr i32) (result i64)
    local.get $addr
    i64.load align=4
  )
)`,
    shouldPass: false,
    expectedError: 'Invalid alignment value: 4. Cannot exceed natural alignment of 3'
  },
  {
    name: 'negative_alignment',
    content: `(module
  (memory 1)
  (func $test (param $addr i32) (result i32)
    local.get $addr
    i32.load align=-1
  )
)`,
    shouldPass: false,
    expectedError: 'Invalid alignment value: -1'
  }
];

async function testAlignmentValidation(debug = false) {
  console.log('Starting alignment validation tests...');
  let passed = 0;
  let failed = 0;
  
  for (const test of ALIGNMENT_TESTS) {
    console.log(`\nTesting alignment case: ${test.name}`);
    
    try {
      // Compile the WAT code
      const binary = await compile(test.content.split('\n'));
      
      if (test.shouldPass) {
        console.log(`‚úÖ ${test.name}: PASSED (compilation succeeded as expected)`);
        passed++;
      } else {
        console.error(`‚ùå ${test.name}: FAILED (expected error but got successful compilation)`);
        failed++;
      }
    } catch (error) {
      if (!test.shouldPass && error.message.includes(test.expectedError)) {
        console.log(`‚úÖ ${test.name}: PASSED (got expected error: "${test.expectedError}")`);
        passed++;
      } else if (!test.shouldPass) {
        console.error(`‚ùå ${test.name}: FAILED (error message doesn't match expected)`);
        console.error(`   Expected: ${test.expectedError}`);
        console.error(`   Actual: ${error.message}`);
        failed++;
      } else {
        console.error(`‚ùå ${test.name}: FAILED (expected success but got error)`);
        console.error(`   Error: ${error.message}`);
        failed++;
      }
    }
  }
  
  console.log(`\n=== ALIGNMENT VALIDATION TEST SUMMARY ===`);
  console.log(`Total tests: ${ALIGNMENT_TESTS.length}`);
  console.log(`Passed: ${passed}`);
  console.log(`Failed: ${failed}`);
  console.log(`======================================`);
  
  return passed === ALIGNMENT_TESTS.length;
}

export default testAlignmentValidation;