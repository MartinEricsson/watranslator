import { atEnd, peekToken, getToken, getCurrentCursor, skipToken } from './tape.mjs';

// Generated by 🤖
export function parseMemory() {
    // Parse memory declaration: (memory <size>)
    // or (memory <min> <max>)
    // or (memory <min> <max> shared)
    // or (memory (export "memory") <min>)
    let min = 0;
    let max = null;
    let id = null;
    let shared = false;
    let exportName = null; // Generated by 🤖

    // Check for memory identifier
    if (!atEnd() && peekToken().startsWith('$')) {
        id = getToken();
    }

    // Handle export declaration like (export "memory")
    if (!atEnd() && peekToken() === '(') {
        skipToken(); // Skip opening paren

        if (!atEnd() && peekToken() === 'export') {
            getToken(); // consume 'export' token

            // Parse export name (string)
            if (!atEnd() && peekToken().startsWith('"') && peekToken().endsWith('"')) {
                const token = getToken();
                exportName = token.substring(1, token.length - 1); // Remove quotes
            }

            // Skip closing paren
            if (!atEnd() && peekToken() === ')') {
                skipToken();
            }
        } else {
            // If not export, revert and continue with normal parsing
            // This is a simplification; in real code you'd need to handle this better
            skipToken(); // Skip whatever token came after the '('
            if (!atEnd() && peekToken() === ')') {
                skipToken(); // Skip closing paren
            }
        }
    }

    // Parse minimum size (required)
    if (!atEnd() && /^\d+$/.test(peekToken())) {
        min = Number.parseInt(getToken(), 10);

        // Parse maximum size (optional)
        if (!atEnd() && /^\d+$/.test(peekToken())) {
            max = Number.parseInt(getToken(), 10);

            // Check for shared attribute
            if (!atEnd() && peekToken() === 'shared') { // Generated by 🤖
                getToken(); // consume 'shared' token
                shared = true;
            }
        }
    }

    // Check for shared attribute at any position (more flexible parsing)
    if (!shared && !atEnd() && peekToken() === 'shared') { // Generated by 🤖
        getToken(); // consume 'shared' token
        shared = true;
    }

    const position = getCurrentCursor();

    // Ensure min has a valid value
    // TODO: Error if min is less than 0
    if (min <= 0) min = 1; // Default to at least 1 page for atomic operations

    return { id, min, max, shared, exportName, position }; // Generated by 🤖
}