import { createError, openParenthesis } from './parse-util.mjs';
import { peekToken, getCurrentCursor, atEnd, skipToken, getToken } from './tape.mjs';
import { parseData } from './parse-data.mjs';
import { parseMemory } from './parse-memory.mjs';
import { parseLocalVar } from './parse-localvar.mjs';
import { parseExport } from './parse-export.mjs';
import { parseGlobal } from './parse-global.mjs';
import { parseFunction } from './parse-function.mjs';
import { parseModule } from './parse-module.mjs';

export function parseExpression() {
    if (atEnd()) {
        return null;
    }

    const token = peekToken();
    const tokenPos = getCurrentCursor();

    if (token === '(') {
        const closeParenthesis = openParenthesis();
        skipToken() // Skip opening paren

        if (atEnd()) {
            throw createError("Unexpected end of input after '('");
        }

        const expressionType = getToken();

        if (expressionType === 'module') {
            const module = parseModule();
            module.position = tokenPos;
            return module;
        } else if (expressionType === 'func') {
            const funcExpr = parseFunction();
            funcExpr.position = tokenPos;
            closeParenthesis();
            return funcExpr;
        } else if (expressionType === 'export') {
            const exportExpr = parseExport();
            exportExpr.position = tokenPos;
            closeParenthesis();
            return exportExpr;
        } else if (expressionType === 'local') {
            // Parse local variable declaration
            const localExpr = parseLocalVar();
            closeParenthesis();
            return { type: 'local_decl', ...localExpr, position: tokenPos };
        } else if (expressionType === 'memory') {
            const memoryExpr = parseMemory();
            closeParenthesis();
            return { type: 'memory', ...memoryExpr, position: tokenPos };
        } else if (expressionType === 'data') {
            const dataExpr = parseData();
            closeParenthesis();
            return { type: 'data', ...dataExpr, position: tokenPos };
        } else if (expressionType === 'global') {
            // Parse global variable declaration
            const globalExpr = parseGlobal();
            closeParenthesis();
            return { type: 'global_decl', ...globalExpr, position: tokenPos };
        } else if (expressionType === 'import') {
            // Generated by ü§ñ
            // Support for standalone import statements
            // Skip import tokens and return null for now
            // This just ensures we don't get stuck on import statements
            //TODO: Check this
            while (!atEnd() && peekToken() !== ')') {
                console.error("‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Skipped ", peekToken())
                skipToken()
            }
            closeParenthesis();
            return null;
        } else {
            // Skip unrecognized expressions
            while (!atEnd() && peekToken() !== ')') {
                console.error("‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Skip unrecognized expressions ", peekToken())
                skipToken()
            }
            closeParenthesis();
            return null;
        }
    } else {
        // Handle simple tokens
        skipToken()
        return { value: token, position: tokenPos };
    }
}