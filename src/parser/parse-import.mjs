// filepath: /Users/martinericsson/dev/watranslator/src/parser/parse-import.mjs
// Generated by ðŸ¤–
import { peekToken, atEnd, skipToken, getToken } from './tape.mjs';

export function parseImport() {
    let moduleName = null;
    let fieldName = null;
    let kind = null;
    let name = null;
    let params = [];
    let results = [];

    // Parse module name (first string)
    if (!atEnd() && peekToken().startsWith('"') && peekToken().endsWith('"')) {
        const token = getToken();
        moduleName = token.substring(1, token.length - 1); // Remove quotes
    }

    // Parse field name (second string)
    if (!atEnd() && peekToken().startsWith('"') && peekToken().endsWith('"')) {
        const token = getToken();
        fieldName = token.substring(1, token.length - 1); // Remove quotes
    }

    // Parse the imported entity (func, global, memory, or table)
    if (!atEnd() && peekToken() === '(') {
        skipToken(); // Skip opening paren

        if (!atEnd()) {
            kind = getToken(); // Get the kind (func, global, memory, table)

            // Handle function import
            if (kind === 'func') {
                // Check for function name
                if (!atEnd() && peekToken().startsWith('$')) {
                    name = getToken();
                }

                // Parse parameters and results
                while (!atEnd() && peekToken() !== ')') {
                    if (peekToken() === '(') {
                        skipToken(); // Skip opening paren

                        if (!atEnd()) {
                            const keyword = getToken();

                            if (keyword === 'param') {
                                // Parse parameters
                                while (!atEnd() && peekToken() !== ')') {
                                    if (peekToken().startsWith('$')) {
                                        // Skip parameter name, we only care about types for imports
                                        skipToken();
                                    } else {
                                        // Add parameter type
                                        params.push(getToken());
                                    }
                                }
                            } else if (keyword === 'result') {
                                // Parse results
                                while (!atEnd() && peekToken() !== ')') {
                                    results.push(getToken());
                                }
                            }

                            // Skip closing paren
                            if (!atEnd() && peekToken() === ')') {
                                skipToken();
                            }
                        }
                    } else {
                        skipToken(); // Skip other tokens
                    }
                }
            } else {
                // For other import types (global, memory, table)
                // Skip all tokens until closing paren
                while (!atEnd() && peekToken() !== ')') {
                    skipToken();
                }
            }

            // Skip closing paren of the entity type
            if (!atEnd() && peekToken() === ')') {
                skipToken();
            }
        }
    }

    // Create import object based on the kind
    const importDecl = {
        module: moduleName,
        field: fieldName,
        kind: kind
    };

    if (kind === 'func') {
        importDecl.name = name;
        importDecl.params = params;
        importDecl.results = results;
    }

    return importDecl;
}