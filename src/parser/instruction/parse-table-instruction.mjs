import { atEnd, getToken } from '../tape.mjs';

export function parseTableInstruction(instrToken, position) {
    if (atEnd()) return null;

    if (instrToken === 'table.size') {
        // table.size takes a table index as an immediate value
        const tableIndex = Number.parseInt(getToken(), 10);
        return { type: 'table.size', tableIndex, position };
    }

    if (instrToken === 'table.grow') {
        // Generated by ðŸ¤–
        const tableIndex = Number.parseInt(getToken(), 10);
        return { type: 'table.grow', tableIndex, position };
    }

    if (instrToken === 'table.get') {
        const tableIndex = Number.parseInt(getToken(), 10);
        return { type: 'table.get', tableIndex, position };
    }

    if (instrToken === 'table.set') {
        const tableIndex = Number.parseInt(getToken(), 10);
        return { type: 'table.set', tableIndex, position };
    }

    if (instrToken === 'table.init') {
        //TODO: this is WIP
        // table.init takes two immediate values: element segment index and table index
        const elementIndex = Number.parseInt(getToken(), 10);
        const tableIndex = Number.parseInt(getToken(), 10);
        return { type: 'table.init', elementIndex, tableIndex, position };
    }

    if (instrToken === 'table.copy') {
        // Generated by ðŸ¤–
        const destTableIndex = Number.parseInt(getToken(), 10);
        const srcTableIndex = Number.parseInt(getToken(), 10);
        return { type: 'table.copy', destTableIndex, srcTableIndex, position };
    }

    if (instrToken === 'table.fill') {
        // Generated by ðŸ¤–
        const tableIndex = Number.parseInt(getToken(), 10);
        return { type: 'table.fill', tableIndex, position };
    }

    return null;
}