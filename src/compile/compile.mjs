import wasmConstants from './constants.mjs';
import { sanitizeAST } from './compile-utils.mjs';
import { typeSection } from './sections/type.mjs';
import { importSection } from './sections/import.mjs'; // Generated by ðŸ¤–
import { exportSection } from './sections/export.mjs';
import { startSection } from './sections/start.mjs';
import { functionSection } from './sections/function.mjs';
import { tableSection } from './sections/table.mjs';
import { globalSection } from './sections/global.mjs';
import { memorySection } from './sections/memory.mjs';
import { elementSection } from './sections/element.mjs';
import { codeSection } from './sections/code.mjs';
import { multivalueSection } from './sections/multivalue.mjs';
import { dataCountSection, dataSection } from './sections/data.mjs';

const { BINARY } = wasmConstants;

const compileToWASM = (ast) => {
    // Clean up and validate the AST
    const module = sanitizeAST(ast);

    // Start with the magic and version
    const binary = [...BINARY.MAGIC, ...BINARY.VERSION];

    // For completely empty module (no functions, memories, etc), just return the header
    if ((!module.functions || module.functions.length === 0) &&
        (!module.memories || module.memories.length === 0) &&
        (!module.datas || module.datas.length === 0) &&
        (!module.globals || module.globals.length === 0) &&
        (!module.tables || module.tables.length === 0) &&
        (!module.elements || module.elements.length === 0) &&
        (!module.exports || Object.keys(module.exports).length === 0)) {
        return new Uint8Array(binary);
    }

    const functions = module.functions || [];
    const globals = module.globals || [];
    const tables = module.tables || [];
    const elements = module.elements || [];
    const multiValueBlockTypes = [];

    multivalueSection(functions, multiValueBlockTypes);

    typeSection(functions, multiValueBlockTypes, binary);

    // =================== IMPORT SECTION ===================
    // Generated by ðŸ¤–
    importSection(module, binary);

    // =================== FUNCTION SECTION ===================
    functionSection(functions, binary);

    // =================== TABLE SECTION ===================
    tableSection(tables, binary);

    // =================== GLOBAL SECTION ===================
    globalSection(globals, binary);

    // =================== MEMORY SECTION ===================
    memorySection(module, binary);

    // =================== EXPORT SECTION ===================
    exportSection(module, binary);

    // =================== START SECTION ===================
    startSection(module, functions, binary);

    // =================== ELEMENT SECTION ===================
    elementSection(elements, functions, binary);

    // =================== DATA COUNT SECTION ===================
    // Only include if we have data sections
    if (module.datas && module.datas.length > 0) {
        dataCountSection(module, binary);
    }

    // =================== CODE SECTION ===================
    codeSection(functions, globals, module, binary);

    // =================== DATA SECTION ===================
    console.log('DEBUG: module.datas.length before dataSection =', module.datas ? module.datas.length : 'undefined'); // Generated by ðŸ¤–
    if (module.datas && module.datas.length > 0) {
        dataSection(module, binary);
    }

    return new Uint8Array(binary)
}

export { compileToWASM }
