import { encodeULEB128 } from "../compile-utils.mjs";


// Generated by 🤖

const ATOMIC_PREFIX =  0xFE;

const ATOMIC_RMW_ADD_I32 = 0x1E;   // i32.atomic.rmw.add
const ATOMIC_RMW_ADD_I64 = 0x1F;   // i64.atomic.rmw.add
const ATOMIC_RMW8_ADD_U_I32 = 0x20;   // i32.atomic.rmw8.add_u
const ATOMIC_RMW16_ADD_U_I32 = 0x21;  // i32.atomic.rmw16.add_u
const ATOMIC_RMW8_ADD_U_I64 = 0x22;   // i64.atomic.rmw8.add_u
const ATOMIC_RMW16_ADD_U_I64 = 0x23;  // i64.atomic.rmw16.add_u
const ATOMIC_RMW32_ADD_U_I64 = 0x24;  // i64.atomic.rmw32.add_u

const ATOMIC_RMW_SUB_I32 = 0x25;   // i32.atomic.rmw.sub
const ATOMIC_RMW_SUB_I64 = 0x26;   // i64.atomic.rmw.sub
const ATOMIC_RMW8_SUB_U_I32 = 0x27;   // i32.atomic.rmw8.sub_u
const ATOMIC_RMW16_SUB_U_I32 = 0x28;  // i32.atomic.rmw16.sub_u
const ATOMIC_RMW8_SUB_U_I64 = 0x29;   // i64.atomic.rmw8.sub_u
const ATOMIC_RMW16_SUB_U_I64 = 0x2A;  // i64.atomic.rmw16.sub_u
const ATOMIC_RMW32_SUB_U_I64 = 0x2B;  // i64.atomic.rmw32.sub_u

const ATOMIC_RMW_AND_I32 = 0x2C;   // i32.atomic.rmw.and
const ATOMIC_RMW_AND_I64 = 0x2D;   // i64.atomic.rmw.and
const ATOMIC_RMW8_AND_U_I32 = 0x2E;  // i32.atomic.rmw8.and_u
const ATOMIC_RMW16_AND_U_I32 = 0x2F; // i32.atomic.rmw16.and_u
const ATOMIC_RMW8_AND_U_I64 = 0x30;  // i64.atomic.rmw8.and_u
const ATOMIC_RMW16_AND_U_I64 = 0x31; // i64.atomic.rmw16.and_u
const ATOMIC_RMW32_AND_U_I64 = 0x32; // i64.atomic.rmw32.and_u  // Generated by 🤖

const ATOMIC_RMW_OR_I32 = 0x33;    // i32.atomic.rmw.or
const ATOMIC_RMW_OR_I64 = 0x34;    // i64.atomic.rmw.or
const ATOMIC_RMW8_OR_U_I32 = 0x35;  // i32.atomic.rmw8.or_u
const ATOMIC_RMW16_OR_U_I32 = 0x36; // i32.atomic.rmw16.or_u
const ATOMIC_RMW8_OR_U_I64 = 0x37;  // i64.atomic.rmw8.or_u
const ATOMIC_RMW16_OR_U_I64 = 0x38; // i64.atomic.rmw16.or_u
const ATOMIC_RMW32_OR_U_I64 = 0x39; // i64.atomic.rmw32.or_u
// Generated by 🤖

const ATOMIC_RMW_XOR_I32 = 0x3A;   // i32.atomic.rmw.xor
const ATOMIC_RMW_XOR_I64 = 0x3B;   // i64.atomic.rmw.xor
const ATOMIC_RMW8_XOR_U_I32 = 0x3C;  // i32.atomic.rmw8.xor_u
const ATOMIC_RMW16_XOR_U_I32 = 0x3D; // i32.atomic.rmw16.xor_u
const ATOMIC_RMW8_XOR_U_I64 = 0x3E;  // i64.atomic.rmw8.xor_u
const ATOMIC_RMW16_XOR_U_I64 = 0x3F; // i64.atomic.rmw16.xor_u
const ATOMIC_RMW32_XOR_U_I64 = 0x40; // i64.atomic.rmw32.xor_u
// Generated by 🤖

const ATOMIC_RMW_XCHG_I32 = 0x41;  // i32.atomic.rmw.xchg
const ATOMIC_RMW_XCHG_I64 = 0x42;  // i64.atomic.rmw.xchg
const ATOMIC_RMW8_XCHG_U_I32 = 0x43;  // i32.atomic.rmw8.xchg_u
const ATOMIC_RMW16_XCHG_U_I32 = 0x44; // i32.atomic.rmw16.xchg_u
const ATOMIC_RMW8_XCHG_U_I64 = 0x45;  // i64.atomic.rmw8.xchg_u
const ATOMIC_RMW16_XCHG_U_I64 = 0x46; // i64.atomic.rmw16.xchg_u
const ATOMIC_RMW32_XCHG_U_I64 = 0x47; // i64.atomic.rmw32.xchg_u
// Generated by 🤖

const ATOMIC_RMW_CMPXCHG_I32 = 0x48; // i32.atomic.rmw.cmpxchg
const ATOMIC_RMW_CMPXCHG_I64 = 0x49; // i64.atomic.rmw.cmpxchg
const ATOMIC_RMW8_CMPXCHG_U_I32 = 0x4A; // i32.atomic.rmw8.cmpxchg_u
const ATOMIC_RMW16_CMPXCHG_U_I32 = 0x4B; // i32.atomic.rmw16.cmpxchg_u
const ATOMIC_RMW8_CMPXCHG_U_I64 = 0x4C; // i64.atomic.rmw8.cmpxchg_u
const ATOMIC_RMW16_CMPXCHG_U_I64 = 0x4D; // i64.atomic.rmw16.cmpxchg_u
const ATOMIC_RMW32_CMPXCHG_U_I64 = 0x4E; // i64.atomic.rmw32.cmpxchg_u
// Generated by 🤖

const ATOMIC_FENCE = 0x03;        // atomic.fence - Generated by 🤖

const ATOMIC_INSTR = new Map([
    ['i32.atomic.rmw.add', ATOMIC_RMW_ADD_I32],
    ['i64.atomic.rmw.add', ATOMIC_RMW_ADD_I64],
    ['i32.atomic.rmw8.add_u', ATOMIC_RMW8_ADD_U_I32],
    ['i32.atomic.rmw16.add_u', ATOMIC_RMW16_ADD_U_I32],
    ['i64.atomic.rmw8.add_u', ATOMIC_RMW8_ADD_U_I64],
    ['i64.atomic.rmw16.add_u', ATOMIC_RMW16_ADD_U_I64],
    ['i64.atomic.rmw32.add_u', ATOMIC_RMW32_ADD_U_I64],
    ['i32.atomic.rmw.sub', ATOMIC_RMW_SUB_I32],
    ['i64.atomic.rmw.sub', ATOMIC_RMW_SUB_I64],
    ['i32.atomic.rmw8.sub_u', ATOMIC_RMW8_SUB_U_I32],
    ['i32.atomic.rmw16.sub_u', ATOMIC_RMW16_SUB_U_I32],
    ['i64.atomic.rmw8.sub_u', ATOMIC_RMW8_SUB_U_I64],
    ['i64.atomic.rmw16.sub_u', ATOMIC_RMW16_SUB_U_I64],
    ['i64.atomic.rmw32.sub_u', ATOMIC_RMW32_SUB_U_I64], // Generated by 🤖
    ['i32.atomic.rmw.and', ATOMIC_RMW_AND_I32],
    ['i64.atomic.rmw.and', ATOMIC_RMW_AND_I64],
    ['i32.atomic.rmw8.and_u', ATOMIC_RMW8_AND_U_I32],
    ['i32.atomic.rmw16.and_u', ATOMIC_RMW16_AND_U_I32],
    ['i64.atomic.rmw8.and_u', ATOMIC_RMW8_AND_U_I64],
    ['i64.atomic.rmw16.and_u', ATOMIC_RMW16_AND_U_I64],
    ['i64.atomic.rmw32.and_u', ATOMIC_RMW32_AND_U_I64], // Generated by 🤖
    ['i32.atomic.rmw.or', ATOMIC_RMW_OR_I32],
    ['i64.atomic.rmw.or', ATOMIC_RMW_OR_I64],
    ['i32.atomic.rmw8.or_u', ATOMIC_RMW8_OR_U_I32],
    ['i32.atomic.rmw16.or_u', ATOMIC_RMW16_OR_U_I32],
    ['i64.atomic.rmw8.or_u', ATOMIC_RMW8_OR_U_I64],
    ['i64.atomic.rmw16.or_u', ATOMIC_RMW16_OR_U_I64],
    ['i64.atomic.rmw32.or_u', ATOMIC_RMW32_OR_U_I64], // Generated by 🤖
    ['i32.atomic.rmw.xor', ATOMIC_RMW_XOR_I32],
    ['i64.atomic.rmw.xor', ATOMIC_RMW_XOR_I64],
    ['i32.atomic.rmw8.xor_u', ATOMIC_RMW8_XOR_U_I32],
    ['i32.atomic.rmw16.xor_u', ATOMIC_RMW16_XOR_U_I32],
    ['i64.atomic.rmw8.xor_u', ATOMIC_RMW8_XOR_U_I64],
    ['i64.atomic.rmw16.xor_u', ATOMIC_RMW16_XOR_U_I64],
    ['i64.atomic.rmw32.xor_u', ATOMIC_RMW32_XOR_U_I64], // Generated by 🤖
    ['i32.atomic.rmw.xchg', ATOMIC_RMW_XCHG_I32],
    ['i64.atomic.rmw.xchg', ATOMIC_RMW_XCHG_I64],
    ['i32.atomic.rmw8.xchg_u', ATOMIC_RMW8_XCHG_U_I32],
    ['i32.atomic.rmw16.xchg_u', ATOMIC_RMW16_XCHG_U_I32],
    ['i64.atomic.rmw8.xchg_u', ATOMIC_RMW8_XCHG_U_I64],
    ['i64.atomic.rmw16.xchg_u', ATOMIC_RMW16_XCHG_U_I64],
    ['i64.atomic.rmw32.xchg_u', ATOMIC_RMW32_XCHG_U_I64], // Generated by 🤖
    ['i32.atomic.rmw.cmpxchg', ATOMIC_RMW_CMPXCHG_I32],
    ['i64.atomic.rmw.cmpxchg', ATOMIC_RMW_CMPXCHG_I64],
    ['i32.atomic.rmw8.cmpxchg_u', ATOMIC_RMW8_CMPXCHG_U_I32],
    ['i32.atomic.rmw16.cmpxchg_u', ATOMIC_RMW16_CMPXCHG_U_I32],
    ['i64.atomic.rmw8.cmpxchg_u', ATOMIC_RMW8_CMPXCHG_U_I64],
    ['i64.atomic.rmw16.cmpxchg_u', ATOMIC_RMW16_CMPXCHG_U_I64],
    ['i64.atomic.rmw32.cmpxchg_u', ATOMIC_RMW32_CMPXCHG_U_I64], // Generated by 🤖
]);
// Generated by 🤖

export function compileAtomicOps(instr, func, body, module) {
    // Special case for atomic.fence
    if (instr.type === 'atomic.fence' || instr.op === 'atomic.fence') {
        // Write the atomic prefix first (0xFE)
        body.push(ATOMIC_PREFIX);
        
        // Write the fence opcode
        body.push(ATOMIC_FENCE);
        
        // Fence requires a reserved byte (0x00) according to spec
        body.push(0x00);
        
        return true;
    }

    if (!ATOMIC_INSTR.has(instr.op)) {
        return false;
    }

    // Write the atomic prefix first (0xFE)
    body.push(ATOMIC_PREFIX);
    
    // Write the specific atomic operation opcode
    body.push(ATOMIC_INSTR.get(instr.op));
    
    // For atomic RMW operations, WebAssembly requires align=0 regardless of natural alignment
    // Generated by 🤖
    const memarg = instr.memarg || { align: 0, offset: 0 };
    
    // Write alignment as ULEB128
    const alignBytes = encodeULEB128(memarg.align);
    body.push(...alignBytes);
    
    // Write offset as ULEB128
    const offsetBytes = encodeULEB128(memarg.offset || 0);
    body.push(...offsetBytes);
    
    return true;
    
    // Generated by 🤖
}