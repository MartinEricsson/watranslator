import wasmConstants from "../constants.mjs";
import { createError } from "./error.mjs";
import { encodeULEB128 } from "../compile-utils.mjs";

const {
    INSTR
} = wasmConstants;

function variableByIndexName(instr, func) {
    let varIndex = -1;
    if (instr.operand.startsWith('$')) {
        varIndex = func.parameters.findIndex(p => p.name === instr.operand);
        if (varIndex === -1 && func.locals) {
            const localIndex = func.locals.findIndex(l => l.name === instr.operand);
            if (localIndex !== -1) {
                varIndex = func.parameters.length + localIndex;
            }
        }
    } else {
        varIndex = parseInt(instr.operand, 10) || 0;
    }

    if (varIndex === -1) {
        throw new Error(`Unknown variable: ${instr.operand}`);
    }

    // If we have a local variable map, use it to find the reordered index
    if (func.localMap && func.localMap.has(varIndex)) {
        return func.localMap.get(varIndex);
    }

    return varIndex;
} // Generated by ðŸ¤–

export function compileVariableAccess(instr, func, body, moduleGlobals, module) {
    if (instr.type === 'get_local' || instr.type === 'local.get') {
        body.push(INSTR.LOCAL_GET);

        try {
            const varIndex = variableByIndexName(instr, func);
            body.push(...encodeULEB128(varIndex));

            return true;
        } catch (err) {
            throw createError(instr, func, module, `Cannot find local variable: ${instr.operand}. Make sure the variable is defined with a param or local declaration.`);
        }
    } else if (instr.type === 'set_local' || instr.type === 'local.set') {
        body.push(INSTR.LOCAL_SET);

        try {
            const varIndex = variableByIndexName(instr, func);
            body.push(...encodeULEB128(varIndex));

            return true;
        } catch (err) {
            throw createError(instr, func, module, `Cannot find local variable: ${instr.operand}`);
        }
    } else if (instr.type === 'local.tee') {
        // Generated by ðŸ¤–
        body.push(INSTR.LOCAL_TEE);

        try {
            const varIndex = variableByIndexName(instr, func);
            body.push(...encodeULEB128(varIndex));
            return true;
        } catch (err) {
            throw createError(instr, func, module, `Cannot find local variable: ${instr.operand}`);
        }
    } else if (instr.type === 'global.get') {
        body.push(INSTR.GLOBAL_GET);

        // Find global variable index by name
        let globalIndex = -1;
        if (instr.operand.startsWith('$')) {
            globalIndex = moduleGlobals.findIndex(g => g.name === instr.operand);
        } else {
            globalIndex = parseInt(instr.operand, 10) || 0;
        }

        if (globalIndex === -1) {
            throw createError(instr, func, module, `Unknown global variable: ${instr.operand}. Global variables must be defined before use.`);
        }

        body.push(...encodeULEB128(globalIndex));

        return true;
    } else if (instr.type === 'global.set') {
        body.push(INSTR.GLOBAL_SET);

        // Find global variable index by name
        let globalIndex = -1;
        if (instr.operand.startsWith('$')) {
            globalIndex = moduleGlobals.findIndex(g => g.name === instr.operand);
            // Make sure the global is mutable
            if (globalIndex !== -1 && !moduleGlobals[globalIndex].mutable) {
                throw createError(instr, func, module, `Cannot set immutable global: ${instr.operand}. Add (mut) qualifier to make the global mutable.`);
            }
        } else {
            globalIndex = parseInt(instr.operand, 10) || 0;
        }

        if (globalIndex === -1) {
            throw createError(instr, func, module, `Unknown global variable: ${instr.operand}. Global variables must be defined before use.`);
        }

        body.push(...encodeULEB128(globalIndex));

        return true;
    }

    return false;
}