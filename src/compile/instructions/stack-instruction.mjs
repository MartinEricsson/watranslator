import wasmConstants from "../constants.mjs";

const {
    INSTR
} = wasmConstants;

// stack instr
const STACK_INSTR = [
    { type: "nop", instr: INSTR.NOP },
    { type: "unreachable", instr: INSTR.UNREACHABLE },
    { type: "i32.add", instr: INSTR.I32_ADD },
    { type: "i32.sub", instr: INSTR.I32_SUB },
    { type: "i32.mul", instr: INSTR.I32_MUL },
    { type: "i32.div_s", instr: INSTR.I32_DIV_S },
    { type: "i32.div_u", instr: INSTR.I32_DIV_U },
    { type: "i32.rem_s", instr: INSTR.I32_REM_S },
    { type: "i32.rem_u", instr: INSTR.I32_REM_U },
    { type: "i32.and", instr: INSTR.I32_AND },
    { type: "i32.or", instr: INSTR.I32_OR },
    { type: "i32.xor", instr: INSTR.I32_XOR },
    { type: "i32.shl", instr: INSTR.I32_SHL },
    { type: "i32.shr_s", instr: INSTR.I32_SHR_S },
    { type: "i32.shr_u", instr: INSTR.I32_SHR_U },
    { type: "i32.rotl", instr: INSTR.I32_ROTL },
    { type: "i32.rotr", instr: INSTR.I32_ROTR },
    { type: "i32.eq", instr: INSTR.I32_EQ },
    { type: "i32.eqz", instr: INSTR.I32_EQZ },
    { type: "i32.ne", instr: INSTR.I32_NE },
    { type: "i32.lt_s", instr: INSTR.I32_LT_S },
    { type: "i32.lt_u", instr: INSTR.I32_LT_U },
    { type: "i32.gt_s", instr: INSTR.I32_GT_S },
    { type: "i32.gt_u", instr: INSTR.I32_GT_U },
    { type: "i32.le_s", instr: INSTR.I32_LE_S },
    { type: "i32.le_u", instr: INSTR.I32_LE_U },
    { type: "i32.ge_s", instr: INSTR.I32_GE_S },
    { type: "i32.ge_u", instr: INSTR.I32_GE_U },
    { type: "i32.clz", instr: INSTR.I32_CLZ },
    { type: "i32.ctz", instr: INSTR.I32_CTZ },
    { type: "i32.popcnt", instr: INSTR.I32_POPCNT },
    { type: "i32.wrap_i64", instr: INSTR.I32_WRAP_I64 },
    { type: "i32.trunc_f32_s", instr: INSTR.I32_TRUNC_F32_S },
    { type: "i32.trunc_f32_u", instr: INSTR.I32_TRUNC_F32_U },
    { type: "i32.trunc_f64_s", instr: INSTR.I32_TRUNC_F64_S },
    { type: "i32.trunc_f64_u", instr: INSTR.I32_TRUNC_F64_U },
    { type: "i32.reinterpret_f32", instr: INSTR.I32_REINTERPRET_F32 },
    { type: "i32.extend8_s", instr: INSTR.I32_EXTEND8_S },
    { type: "i32.extend16_s", instr: INSTR.I32_EXTEND16_S },
    { type: "f32.add", instr: INSTR.F32_ADD },
    { type: "f32.sub", instr: INSTR.F32_SUB },
    { type: "f32.mul", instr: INSTR.F32_MUL },
    { type: "f32.div", instr: INSTR.F32_DIV },
    { type: "f32.sqrt", instr: INSTR.F32_SQRT },
    { type: "f32.min", instr: INSTR.F32_MIN },
    { type: "f32.max", instr: INSTR.F32_MAX },
    { type: "f32.ceil", instr: INSTR.F32_CEIL },
    { type: "f32.floor", instr: INSTR.F32_FLOOR },
    { type: "f32.trunc", instr: INSTR.F32_TRUNC },
    { type: "f32.nearest", instr: INSTR.F32_NEAREST },
    { type: "f32.eq", instr: INSTR.F32_EQ },
    { type: "f32.ne", instr: INSTR.F32_NE },
    { type: "f32.lt", instr: INSTR.F32_LT },
    { type: "f32.gt", instr: INSTR.F32_GT },
    { type: "f32.le", instr: INSTR.F32_LE },
    { type: "f32.ge", instr: INSTR.F32_GE },
    { type: "f32.abs", instr: INSTR.F32_ABS },
    { type: "f32.neg", instr: INSTR.F32_NEG },
    { type: "f32.copysign", instr: INSTR.F32_COPYSIGN },
    { type: "f32.convert_i32_s", instr: INSTR.F32_CONVERT_I32_S },
    { type: "f32.convert_i32_u", instr: INSTR.F32_CONVERT_I32_U },
    { type: "f32.convert_i64_s", instr: INSTR.F32_CONVERT_I64_S },
    { type: "f32.convert_i64_u", instr: INSTR.F32_CONVERT_I64_U },
    { type: "f32.demote_f64", instr: INSTR.F32_DEMOTE_F64 },
    { type: "f32.reinterpret_i32", instr: INSTR.F32_REINTERPRET_I32 },
    { type: "i64.add", instr: INSTR.I64_ADD },
    { type: "i64.sub", instr: INSTR.I64_SUB },
    { type: "i64.mul", instr: INSTR.I64_MUL },
    { type: "i64.div_s", instr: INSTR.I64_DIV_S },
    { type: "i64.div_u", instr: INSTR.I64_DIV_U },
    { type: "i64.rem_s", instr: INSTR.I64_REM_S },
    { type: "i64.rem_u", instr: INSTR.I64_REM_U },
    { type: "i64.and", instr: INSTR.I64_AND },
    { type: "i64.or", instr: INSTR.I64_OR },
    { type: "i64.xor", instr: INSTR.I64_XOR },
    { type: "i64.shl", instr: INSTR.I64_SHL },
    { type: "i64.shr_s", instr: INSTR.I64_SHR_S },
    { type: "i64.shr_u", instr: INSTR.I64_SHR_U },
    { type: "i64.rotl", instr: INSTR.I64_ROTL },
    { type: "i64.rotr", instr: INSTR.I64_ROTR },
    { type: "i64.eq", instr: INSTR.I64_EQ },
    { type: "i64.ne", instr: INSTR.I64_NE },
    { type: "i64.lt_s", instr: INSTR.I64_LT_S },
    { type: "i64.lt_u", instr: INSTR.I64_LT_U },
    { type: "i64.gt_s", instr: INSTR.I64_GT_S },
    { type: "i64.gt_u", instr: INSTR.I64_GT_U },
    { type: "i64.le_s", instr: INSTR.I64_LE_S },
    { type: "i64.le_u", instr: INSTR.I64_LE_U },
    { type: "i64.ge_s", instr: INSTR.I64_GE_S },
    { type: "i64.ge_u", instr: INSTR.I64_GE_U },
    { type: "i64.clz", instr: INSTR.I64_CLZ },
    { type: "i64.ctz", instr: INSTR.I64_CTZ },
    { type: "i64.popcnt", instr: INSTR.I64_POPCNT },
    { type: "i64.eqz", instr: INSTR.I64_EQZ },
    { type: "i64.extend8_s", instr: INSTR.I64_EXTEND8_S },
    { type: "i64.extend16_s", instr: INSTR.I64_EXTEND16_S },
    { type: "i64.extend32_s", instr: INSTR.I64_EXTEND32_S },
    { type: "i64.extend_i32_s", instr: INSTR.I64_EXTEND_I32_S },
    { type: "i64.extend_i32_u", instr: INSTR.I64_EXTEND_I32_U },
    { type: "f64.add", instr: INSTR.F64_ADD },
    { type: "f64.sub", instr: INSTR.F64_SUB },
    { type: "f64.mul", instr: INSTR.F64_MUL },
    { type: "f64.div", instr: INSTR.F64_DIV },
    { type: "f64.abs", instr: INSTR.F64_ABS },
    { type: "f64.neg", instr: INSTR.F64_NEG },
    { type: "f64.sqrt", instr: INSTR.F64_SQRT },
    { type: "f64.min", instr: INSTR.F64_MIN },
    { type: "f64.max", instr: INSTR.F64_MAX },
    { type: "f64.ceil", instr: INSTR.F64_CEIL },
    { type: "f64.floor", instr: INSTR.F64_FLOOR },
    { type: "f64.trunc", instr: INSTR.F64_TRUNC },
    { type: "f64.nearest", instr: INSTR.F64_NEAREST },
    { type: "f64.eq", instr: INSTR.F64_EQ },
    { type: "f64.ne", instr: INSTR.F64_NE },
    { type: "f64.lt", instr: INSTR.F64_LT },
    { type: "f64.gt", instr: INSTR.F64_GT },
    { type: "f64.le", instr: INSTR.F64_LE },
    { type: "f64.ge", instr: INSTR.F64_GE },
    { type: "f64.copysign", instr: INSTR.F64_COPYSIGN },
    { type: "f64.convert_i32_s", instr: INSTR.F64_CONVERT_I32_S },
    { type: "f64.convert_i32_u", instr: INSTR.F64_CONVERT_I32_U },
    { type: "f64.convert_i64_s", instr: INSTR.F64_CONVERT_I64_S },
    { type: "f64.convert_i64_u", instr: INSTR.F64_CONVERT_I64_U },
    { type: "f64.promote_f32", instr: INSTR.F64_PROMOTE_F32 },
    { type: "f64.reinterpret_i64", instr: INSTR.F64_REINTERPRET_I64 },
    { type: "i64.trunc_f32_s", instr: INSTR.I64_TRUNC_F32_S },
    { type: "i64.trunc_f32_u", instr: INSTR.I64_TRUNC_F32_U },
    { type: "i64.trunc_f64_s", instr: INSTR.I64_TRUNC_F64_S },
    { type: "i64.trunc_f64_u", instr: INSTR.I64_TRUNC_F64_U },
    { type: "i64.reinterpret_f64", instr: INSTR.I64_REINTERPRET_F64 },
    { type: "drop", instr: INSTR.DROP },
    { type: "return", instr: INSTR.RETURN },
    { type: "select", instr: INSTR.SELECT }
];

export function compileStackInstruction(instr, body) {
    if (STACK_INSTR.some(i => i.type === instr.type)) {
        const stackInstr = STACK_INSTR.find(i => i.type === instr.type);
        body.push(stackInstr.instr);
        return true;
    }

    return false;
}