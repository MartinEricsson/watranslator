import wasmConstants from "../constants.mjs";
import { encodeULEB128 } from "../compile-utils.mjs";

const {
    SECTION,
} = wasmConstants;

export function startSection(module, functions, binary) {
    // Generated by ðŸ¤–
    if (module.start !== null) {
        let startSection = [SECTION.START]; // Section ID (8)

        let startFuncIndex;

        // Resolve the function index - could be numeric or a symbolic name
        if (typeof module.start === 'string' && module.start.startsWith('$')) {
            // Look up function index by name
            startFuncIndex = functions.findIndex(f => f.name === module.start);
            if (startFuncIndex === -1) {
                throw new Error(`Unknown start function: ${module.start}`);
            }
        } else {
            // Direct numeric index
            startFuncIndex = parseInt(module.start, 10) || 0;
        }

        // The start section just contains the function index
        const startEntry = [...encodeULEB128(startFuncIndex)];

        // Set section size
        startSection.push(...encodeULEB128(startEntry.length));

        // Add the function index
        startSection.push(...startEntry);

        // Add start section to binary
        binary.push(...startSection);
    }
}