// filepath: /Users/martinericsson/dev/fes-compiler/src/compile/sections/import.mjs
// Generated by ðŸ¤–
import wasmConstants from "../constants.mjs";
import { encodeULEB128, getWasmType } from "../compile-utils.mjs";

const {
    SECTION,
    IMPORT_KIND
} = wasmConstants;

export function importSection(module, binary) {
    // Collect all imports from the module
    const imports = [];
    
    // Generated by ðŸ¤–
    // Check for imported functions
    if (module.functions && module.functions.length > 0) {
        for (let i = 0; i < module.functions.length; i++) {
            const func = module.functions[i];
            if (func.import) {
                imports.push({
                    kind: 'function',
                    module: func.import.module,
                    field: func.import.field,
                    typeIndex: i,  // This will need to be adjusted to point to the correct type
                    isImported: true
                });
                
                // Mark the function as imported for later processing
                func.isImported = true;
            }
        }
    }
    
    // Check for imported globals
    if (module.globals && module.globals.length > 0) {
        for (const global of module.globals) {
            if (global.import) {
                imports.push({
                    kind: 'global',
                    module: global.import.module,
                    field: global.import.field,
                    globalType: global.type,
                    mutable: global.mutable
                });
            }
        }
    }
    
    // If there are no imports, return without adding an import section
    if (imports.length === 0) {
        return;
    }
    
    // Start the import section
    let importSectionBytes = [SECTION.IMPORT];
    
    // Create the section content
    const importEntries = [];
    
    // Add the count of imports
    importEntries.push(...encodeULEB128(imports.length));
    
    // Process each import
    for (const imp of imports) {
        // Encode module name as UTF-8 string
        const moduleNameBytes = new TextEncoder().encode(imp.module);
        importEntries.push(...encodeULEB128(moduleNameBytes.length));
        importEntries.push(...moduleNameBytes);
        
        // Encode field name as UTF-8 string
        const fieldNameBytes = new TextEncoder().encode(imp.field);
        importEntries.push(...encodeULEB128(fieldNameBytes.length));
        importEntries.push(...fieldNameBytes);
        
        if (imp.kind === 'global') {
            // Kind tag for global
            importEntries.push(IMPORT_KIND.GLOBAL);
            
            // Global type and mutability
            importEntries.push(getWasmType(imp.globalType));
            importEntries.push(imp.mutable ? 1 : 0);
        } else if (imp.kind === 'function') {
            // Generated by ðŸ¤–
            // Kind tag for function
            importEntries.push(IMPORT_KIND.FUNCTION);
            
            // Type index for the function signature
            importEntries.push(...encodeULEB128(imp.typeIndex));
        }
    }
    
    // Add section size
    importSectionBytes.push(...encodeULEB128(importEntries.length));
    
    // Add section content
    importSectionBytes.push(...importEntries);
    
    // Add section to binary
    binary.push(...importSectionBytes);
}
