import wasmConstants from "../constants.mjs";
import {
    encodeULEB128,
    encodeString
} from "../compile-utils.mjs";

const {
    EXPORT,
    SECTION,
} = wasmConstants;

export function exportSection(module, binary) {
    if (module.exports && Object.keys(module.exports).length > 0) {
        let exportSection = [SECTION.EXPORT]; // Section ID

        // Export count
        const exportEntries = [...encodeULEB128(Object.keys(module.exports).length)];

        // Add each export entry
        for (const [exportName, exportData] of Object.entries(module.exports)) {
            // Export name
            const nameBytes = encodeString(exportName);
            exportEntries.push(...nameBytes);

            if (exportData.kind === 'func') {
                // Kind (function)
                exportEntries.push(EXPORT.FUNC);

                // Function index
                let funcIndex = typeof exportData.index === 'number'
                    ? exportData.index
                    : parseInt(exportData.index, 10) || 0;

                exportEntries.push(...encodeULEB128(funcIndex));
            } else if (exportData.kind === 'memory') {
                // Kind (memory)
                exportEntries.push(EXPORT.MEM);

                // Memory index
                let memIndex = typeof exportData.index === 'number'
                    ? exportData.index
                    : parseInt(exportData.index, 10) || 0;

                exportEntries.push(...encodeULEB128(memIndex));
            } else if (exportData.kind === 'global') {
                // Kind (global)
                exportEntries.push(EXPORT.GLOBAL);

                // Global index
                let globalIndex = typeof exportData.index === 'number'
                    ? exportData.index
                    : parseInt(exportData.index, 10) || 0;

                exportEntries.push(...encodeULEB128(globalIndex));
            } else if (exportData.kind === 'table') {
                // Generated by ðŸ¤–
                // Kind (table)
                exportEntries.push(EXPORT.TABLE);

                // Table index
                let tableIndex = typeof exportData.index === 'number'
                    ? exportData.index
                    : parseInt(exportData.index, 10) || 0;

                exportEntries.push(...encodeULEB128(tableIndex));
            }
        }

        // Section size
        exportSection.push(...encodeULEB128(exportEntries.length));

        // Section content
        exportSection.push(...exportEntries);

        binary.push(...exportSection);
    }
}